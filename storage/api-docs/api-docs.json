{
    "openapi": "3.0.0",
    "info": {
        "title": "Mon API",
        "description": "Documentation de l'API avec Swagger",
        "contact": {
            "email": "contact@exemple.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/register": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Enregistrer un nouvel utilisateur",
                "operationId": "8a56853624e025573120a09a4c75d468",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "email",
                                    "phone",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+123456789"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "secret123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "secret123"
                                    },
                                    "role_id": {
                                        "type": "integer",
                                        "example": 2
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Registration successful, OTP required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Registration successful, OTP required for verification"
                                        },
                                        "user": {
                                            "type": "object"
                                        },
                                        "requiresOTP": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "otp_sent_via": {
                                            "type": "string",
                                            "example": "whatsapp"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "User login",
                "operationId": "a3b306d14572d1f4bd6c064b3233e7b8",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login",
                                    "password"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com or +123456789"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "secret123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login without 2FA",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "type": "object"
                                        },
                                        "token": {
                                            "type": "string"
                                        },
                                        "token_expiration": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Login with OTP required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "OTP required"
                                        },
                                        "requiresOTP": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "user_id": {
                                            "type": "integer"
                                        },
                                        "otp_sent_via": {
                                            "type": "string",
                                            "example": "whatsapp"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/api/resend-otp": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Resend OTP code",
                "operationId": "d345e764f1190fc7cfdc54bb87ec0a10",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com or +123456789"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "whatsapp",
                                            "email"
                                        ],
                                        "example": "email"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP resent successfully"
                    }
                }
            }
        },
        "/api/resend-otp-email": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Resend OTP via email only",
                "operationId": "7ff1b1e24e7e39eb9f830aa24f1ab643",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com or +123456789"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP resent via email successfully"
                    }
                }
            }
        },
        "/api/verify-otp": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Verify OTP code",
                "operationId": "7809ddcd47cab2525ccd43d1c2031bfd",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login",
                                    "otp"
                                ],
                                "properties": {
                                    "login": {
                                        "description": "User email or phone number",
                                        "type": "string",
                                        "example": "john.doe@example.com or +212695388904"
                                    },
                                    "otp": {
                                        "description": "4-digit OTP code",
                                        "type": "string",
                                        "example": "1234"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP valid, authentication successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "description": "User information",
                                            "type": "object"
                                        },
                                        "token": {
                                            "description": "JWT authentication token",
                                            "type": "string"
                                        },
                                        "token_expiration": {
                                            "description": "Token expiration timestamp",
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "country": {
                                            "type": "string",
                                            "example": "Morocco"
                                        },
                                        "continent": {
                                            "type": "string",
                                            "example": "Africa"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or expired OTP",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Invalid or expired OTP"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/me": {
            "get": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Get authenticated user information",
                "operationId": "9d9bc556f927575aa492a88c28fe5908",
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "User logout",
                "operationId": "fe8f3429cd6979b3b4517e186505f9f9",
                "responses": {
                    "200": {
                        "description": "Successfully logged out"
                    }
                }
            }
        },
        "/api/refresh": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Refresh JWT access token using refresh token",
                "operationId": "2c27d311a2876560fcb5a754b556cdc5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "refresh_token"
                                ],
                                "properties": {
                                    "refresh_token": {
                                        "type": "string",
                                        "example": "abc123..."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "New access token generated"
                    }
                }
            }
        },
        "/api/user/update": {
            "put": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Update user profile",
                "operationId": "89ec70688080b1a0c14c7f4fcb01c1f4",
                "responses": {
                    "200": {
                        "description": "Profile updated successfully"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/user/two-factor-toggle": {
            "put": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Toggle two-factor authentication",
                "operationId": "8ce642e8986526322474e85e158a1a45",
                "responses": {
                    "200": {
                        "description": "Two-factor authentication toggled"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/forgot-password": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Send password reset OTP",
                "operationId": "7af8817e88ba5874543ff38f188248f1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "whatsapp",
                                            "email"
                                        ],
                                        "example": "email"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset OTP sent successfully"
                    }
                }
            }
        },
        "/api/reset-password": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Reset password using OTP code",
                "operationId": "00c0aad74830221c6da409a1355ec736",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login",
                                    "code",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "1234"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpassword123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpassword123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully"
                    }
                }
            }
        },
        "/api/change-password": {
            "put": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Change current password",
                "operationId": "c9cf137ca229152d78da153d798cb251",
                "responses": {
                    "200": {
                        "description": "Password changed successfully"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/get-country": {
            "get": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Get user country and continent",
                "operationId": "fb0a07b92de42a0fb9bc3bc46d42456e",
                "responses": {
                    "200": {
                        "description": "Location information retrieved"
                    }
                }
            }
        },
        "/api/test-email": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Test email sending (development only)",
                "operationId": "bdba0fbe8093cbe44f0733ff2c7f53b5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "test@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Test email sent successfully"
                    }
                }
            }
        },
        "/api/bike-part-brands": {
            "get": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Get all bike part brands",
                "operationId": "4084f52f749b5a8426f5a064b8ad12e2",
                "responses": {
                    "200": {
                        "description": "List of brands"
                    }
                }
            },
            "post": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Create a new bike part brand",
                "operationId": "5f93afc5f40009b6070036ceb59f3904",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Shimano"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/bike-part-brands/{id}": {
            "get": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Get a specific bike part brand",
                "operationId": "80864c6c3152868f81b11f4991a88aab",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand found"
                    },
                    "404": {
                        "description": "Brand not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Update a bike part brand",
                "operationId": "a89634c7797aa73912d79d3dd125d851",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Brand"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Brand updated successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Delete a bike part brand",
                "operationId": "0150a8926c28e698c8a0969f815d2c20",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand deleted successfully"
                    },
                    "404": {
                        "description": "Brand not found"
                    }
                }
            }
        },
        "/api/bike-part-categories": {
            "get": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Get all bike part categories",
                "description": "Display a listing of the resource.\nswagger",
                "operationId": "e1b0407e79465a85a6c11a7b1f0533cf",
                "responses": {
                    "200": {
                        "description": "List of categories"
                    }
                }
            },
            "post": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Create a new bike part category",
                "description": "Store a newly created resource in storage.\nswagger",
                "operationId": "a9032b26435e6aef60f3fb730e26cce0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Oil"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/bike-part-categories/{id}": {
            "get": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Get a specific bike part category",
                "description": "Display the specified resource.\nswagger",
                "operationId": "f6625fb70785abbd9fed45b5798e41b7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category found"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Update a bike part category",
                "description": "Update the specified resource in storage.\nswagger",
                "operationId": "892574b696b8b4d5facbd063b0480496",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Oil"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Delete a bike part category",
                "description": "Remove the specified resource from storage.\nswagger",
                "operationId": "5667b4358ec294aec2da9ca0d93507ac",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            }
        },
        "/api/BankCards": {
            "get": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Get all BankCards (Admin only)",
                "operationId": "e68c29d4d26f557a17b9e095146a4f0d",
                "responses": {
                    "200": {
                        "description": "List of BankCards"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/my-cards": {
            "get": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Get authenticated user's cards",
                "operationId": "af74c31afb9229905aa329697bf611f3",
                "responses": {
                    "200": {
                        "description": "List of user's bank cards",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BankCard"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Add a new card for the authenticated user",
                "operationId": "fec5900e84eda158df67dad987d7fe10",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "card_type_id"
                                ],
                                "properties": {
                                    "card_type_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "card_number": {
                                        "type": "string",
                                        "example": "1234 5678 9012 3456"
                                    },
                                    "card_holder_name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "expiration_date": {
                                        "description": "Format: MM/YY",
                                        "type": "string",
                                        "example": "12/25"
                                    },
                                    "cvv": {
                                        "type": "string",
                                        "example": "123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Card added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Bank card successfully added."
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/BankCard"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Card already exists"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/my-cards/{id}": {
            "put": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Update user's card",
                "operationId": "b08e8c3ae4447a9673d44c8b293d7434",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "card_holder_name": {
                                        "type": "string",
                                        "example": "John Doe Updated"
                                    },
                                    "expiration_date": {
                                        "type": "string",
                                        "example": "12/25"
                                    },
                                    "cvv": {
                                        "type": "string",
                                        "example": "456"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Card updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BankCard"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to update this card"
                    },
                    "404": {
                        "description": "Card not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Delete user's card",
                "operationId": "5f1c13a1fb9c7989240d1b0ab2460f9b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Card deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to delete this card"
                    },
                    "404": {
                        "description": "Card not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/BankCards/{id}": {
            "get": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Get BankCard by ID",
                "operationId": "a619b9cda83c954a3be2507121b083af",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BankCard details"
                    },
                    "404": {
                        "description": "BankCard not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Update BankCard (Admin only)",
                "operationId": "a65401dfc863d5335f41b711641ef234",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "New VIP BankCard"
                                    },
                                    "BankCard_type_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "BankCard updated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Delete BankCard (Admin only)",
                "operationId": "e391e402ce09c1cefda6e83740716372",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BankCard deleted"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/my-cards/{id}/set-default": {
            "patch": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Set a card as default for the user",
                "operationId": "0acd3375ae2edd2e99577c30bf812e59",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card ID to set as default",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card set as default successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Card set as default successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/BankCard"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to update this card"
                    },
                    "404": {
                        "description": "Card not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/card-types": {
            "get": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Get all card types",
                "operationId": "53e444235db6a199d405047921f88269",
                "responses": {
                    "200": {
                        "description": "List of card types",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Visa"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Create a new card type",
                "operationId": "105617dc31a6892db1dd00822a9f4b6b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Visa"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Card type created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Visa"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/card-types/{id}": {
            "get": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Get a card type by ID",
                "operationId": "41bbaa5eb347b0f70f1bb6b293a9e589",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card type found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Visa"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Card type not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Update an existing card type",
                "operationId": "5fb058d35caa0167082c6f86a8833bfa",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "MasterCard"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Card type updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "MasterCard"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Card type not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Delete a card type",
                "operationId": "24575cfd80cc74e9b82c9910017c4f36",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Card type deleted"
                    },
                    "404": {
                        "description": "Card type not found"
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "operationId": "3f5817a34833d0a1f4af4548dd3aeaba",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Electronics"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "operationId": "71fcad552bb0eaba9fb191fd8d8dcab0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Electronics"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Electronics"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category by ID",
                "operationId": "c68e76d323c008827a9e47398b1583de",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Electronics"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update an existing category",
                "operationId": "0e686b2748211cc688333ed705dc111f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Home Appliances"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Home Appliances"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "operationId": "4c12e22a7f8c617bd83bfa1fdc05428d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            }
        },
        "/api/colors": {
            "get": {
                "tags": [
                    "Colors"
                ],
                "summary": "Get all colors",
                "operationId": "9af5ded8d7143a0f97e53725eda97464",
                "responses": {
                    "200": {
                        "description": "List of colors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Red"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Colors"
                ],
                "summary": "Create a new color",
                "operationId": "e4d3770c69f36a71c5936b3b35655342",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Blue"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Color created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Blue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/colors/{id}": {
            "get": {
                "tags": [
                    "Colors"
                ],
                "summary": "Get a color by ID",
                "operationId": "c0e5a39d91e5093e2e0f77823615db5a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Color found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Red"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Color not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Colors"
                ],
                "summary": "Update an existing color",
                "operationId": "717be7234f38d1fb4ff4678ba4f59581",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Green"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Color updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Green"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Color not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Colors"
                ],
                "summary": "Delete a color",
                "operationId": "1667d6964960e3a8158e80e50c69f19c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Color deleted"
                    },
                    "404": {
                        "description": "Color not found"
                    }
                }
            }
        },
        "/api/events/{eventId}/activities": {
            "get": {
                "tags": [
                    "Event Activities"
                ],
                "summary": "Get event activities schedule",
                "operationId": "12262af26e592fd51a6e229fd8294d37",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "Event ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of event activities",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "event_id": {
                                                "type": "integer",
                                                "example": 5
                                            },
                                            "title": {
                                                "type": "string",
                                                "example": "Opening Ceremony"
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "Official event opening with special guests"
                                            },
                                            "start_time": {
                                                "type": "string",
                                                "format": "time",
                                                "example": "09:00:00"
                                            },
                                            "end_time": {
                                                "type": "string",
                                                "format": "time",
                                                "example": "09:30:00"
                                            },
                                            "location": {
                                                "type": "string",
                                                "example": "Main Stage"
                                            },
                                            "order_position": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Event Activities"
                ],
                "summary": "Add an activity to event schedule (organizer only)",
                "operationId": "757314e8f5b9bc28de3805edc21b23ef",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Opening Ceremony"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Official event opening"
                                    },
                                    "start_time": {
                                        "type": "string",
                                        "format": "time",
                                        "example": "09:00:00"
                                    },
                                    "end_time": {
                                        "type": "string",
                                        "format": "time",
                                        "example": "09:30:00"
                                    },
                                    "location": {
                                        "type": "string",
                                        "example": "Main Stage"
                                    },
                                    "order_position": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Activity created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Activity created successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized - Not the event organizer"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/activities/{activityId}": {
            "get": {
                "tags": [
                    "Event Activities"
                ],
                "summary": "Get single activity details",
                "operationId": "0336ab48c03f55efe0647a26727b096b",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "activityId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Activity details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "event_id": {
                                            "type": "integer"
                                        },
                                        "title": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "start_time": {
                                            "type": "string"
                                        },
                                        "end_time": {
                                            "type": "string"
                                        },
                                        "location": {
                                            "type": "string"
                                        },
                                        "order_position": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Activity not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Event Activities"
                ],
                "summary": "Update an activity",
                "operationId": "03d41a7ab0612dc64fe508c00c895595",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "activityId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "start_time": {
                                        "type": "string",
                                        "format": "time"
                                    },
                                    "end_time": {
                                        "type": "string",
                                        "format": "time"
                                    },
                                    "location": {
                                        "type": "string"
                                    },
                                    "order_position": {
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Activity updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Activity not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Event Activities"
                ],
                "summary": "Delete an activity",
                "operationId": "b38d81c661a3eecb5b07b7131f41a117",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "activityId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Activity deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Activity deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Activity not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/event-categories": {
            "get": {
                "tags": [
                    "Event Categories"
                ],
                "summary": "Get all event categories",
                "operationId": "37708f110190b71b26e993e2b9095ebb",
                "parameters": [
                    {
                        "name": "with_count",
                        "in": "query",
                        "description": "Include events count",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of event categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Categories retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Motorcycle Racing"
                                                    },
                                                    "slug": {
                                                        "type": "string",
                                                        "example": "motorcycle-racing"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Professional motorcycle racing events"
                                                    },
                                                    "icon": {
                                                        "type": "string",
                                                        "example": "race-flag"
                                                    },
                                                    "color": {
                                                        "type": "string",
                                                        "example": "#FF5733"
                                                    },
                                                    "events_count": {
                                                        "type": "integer",
                                                        "example": 15
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Event Categories"
                ],
                "summary": "Create a new category (auth required)",
                "operationId": "ba313cc8615f36a5056a5862061945bf",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Motorcycle Racing"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Professional motorcycle racing events"
                                    },
                                    "icon": {
                                        "type": "string",
                                        "example": "race-flag"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "#FF5733"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category created successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "slug": {
                                                    "type": "string"
                                                },
                                                "description": {
                                                    "type": "string"
                                                },
                                                "icon": {
                                                    "type": "string"
                                                },
                                                "color": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/event-categories/{id}": {
            "get": {
                "tags": [
                    "Event Categories"
                ],
                "summary": "Get category details",
                "operationId": "d843826c41ca2b452dfa8b06e4e99793",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID or slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "with_events",
                        "in": "query",
                        "description": "Include recent events",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "events_limit",
                        "in": "query",
                        "description": "Number of events to include",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category details with recent events",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "slug": {
                                                    "type": "string"
                                                },
                                                "description": {
                                                    "type": "string"
                                                },
                                                "icon": {
                                                    "type": "string"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "events": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Event Categories"
                ],
                "summary": "Update a category (auth required)",
                "operationId": "e8b441be1d21a96d0c07611873c5cd43",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "icon": {
                                        "type": "string"
                                    },
                                    "color": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Event Categories"
                ],
                "summary": "Delete a category (auth required)",
                "operationId": "1028d59391e88bd6c415fa32d300fd80",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "400": {
                        "description": "Cannot delete category with existing events"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/event-categories/{id}/events": {
            "get": {
                "tags": [
                    "Event Categories"
                ],
                "summary": "Get all events in a category",
                "operationId": "4eda17d2d74faa295854e56393bbb576",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "upcoming",
                                "ongoing",
                                "completed"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Events in category",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            }
        },
        "/api/events/{eventId}/contacts": {
            "get": {
                "tags": [
                    "Event Contacts"
                ],
                "summary": "Get event contacts",
                "operationId": "5e3a5a8369bd31ded12ad9ecba0935a4",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter by contact type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "organizer",
                                "support",
                                "emergency"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of event contacts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Event Contacts"
                ],
                "summary": "Add contact to event (organizer only)",
                "operationId": "756ab810e64858f1d463a001e13c8dbc",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "contact_type"
                                ],
                                "properties": {
                                    "contact_type": {
                                        "type": "string",
                                        "enum": [
                                            "organizer",
                                            "support",
                                            "emergency"
                                        ]
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "contact@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Contact created successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/contacts/{contactId}": {
            "get": {
                "tags": [
                    "Event Contacts"
                ],
                "summary": "Get single contact details",
                "operationId": "cc35ce490ce790054a08dc95dd57ebf2",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact details"
                    },
                    "404": {
                        "description": "Contact not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Event Contacts"
                ],
                "summary": "Update event contact (organizer only)",
                "operationId": "0a58e8ba51d36c5e6d60b98a3d682406",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact updated successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Event Contacts"
                ],
                "summary": "Delete event contact (organizer only)",
                "operationId": "5ba4f771019dadcb6e2bc27b2bfa74e6",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact deleted successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get all events with filters",
                "operationId": "7058ab7c89d20c752b6afd6d808f6526",
                "responses": {
                    "200": {
                        "description": "List of events"
                    }
                }
            },
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Create event with all relations (images, sponsors, activities, contacts, faqs)",
                "operationId": "508895e03d7f10edac84357084c87b20",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description",
                                    "category_id",
                                    "event_date",
                                    "start_time"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "short_description": {
                                        "type": "string"
                                    },
                                    "category_id": {
                                        "type": "integer"
                                    },
                                    "event_date": {
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "start_time": {
                                        "type": "string",
                                        "format": "time"
                                    },
                                    "end_time": {
                                        "type": "string",
                                        "format": "time"
                                    },
                                    "venue_name": {
                                        "type": "string"
                                    },
                                    "address": {
                                        "type": "string"
                                    },
                                    "city_id": {
                                        "type": "integer"
                                    },
                                    "country_id": {
                                        "type": "integer"
                                    },
                                    "latitude": {
                                        "type": "number"
                                    },
                                    "longitude": {
                                        "type": "number"
                                    },
                                    "max_participants": {
                                        "type": "integer"
                                    },
                                    "price": {
                                        "type": "number"
                                    },
                                    "is_free": {
                                        "type": "boolean"
                                    },
                                    "featured_image": {
                                        "type": "string"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "image_url": {
                                                    "type": "string"
                                                },
                                                "is_primary": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "sponsors": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "sponsor_id": {
                                                    "type": "integer"
                                                },
                                                "sponsorship_level": {
                                                    "type": "string",
                                                    "enum": [
                                                        "platinum",
                                                        "gold",
                                                        "silver",
                                                        "bronze"
                                                    ]
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "activities": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "title": {
                                                    "type": "string"
                                                },
                                                "description": {
                                                    "type": "string"
                                                },
                                                "start_time": {
                                                    "type": "string"
                                                },
                                                "end_time": {
                                                    "type": "string"
                                                },
                                                "location": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "contacts": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "contact_type": {
                                                    "type": "string",
                                                    "enum": [
                                                        "organizer",
                                                        "support",
                                                        "emergency"
                                                    ]
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "phone": {
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "faqs": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "question": {
                                                    "type": "string"
                                                },
                                                "answer": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Event created with all relations"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{id}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get event details with all relations",
                "operationId": "6f743f71f7a88dbe57be1d9c9ebf47cb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event details with all relations"
                    }
                }
            },
            "put": {
                "tags": [
                    "Events"
                ],
                "summary": "Update event with all relations",
                "operationId": "fb130dcf1ab4d7abbd3a173741df1f8f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event updated with all relations"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/faqs": {
            "get": {
                "tags": [
                    "Event FAQs"
                ],
                "summary": "Get event FAQs",
                "operationId": "a940dea059f45638d280b938e990ccd0",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "Event ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of FAQs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "FAQs retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "event_id": {
                                                        "type": "integer",
                                                        "example": 5
                                                    },
                                                    "question": {
                                                        "type": "string",
                                                        "example": "Where can I park?"
                                                    },
                                                    "answer": {
                                                        "type": "string",
                                                        "example": "Free parking available at main entrance"
                                                    },
                                                    "order_position": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Event FAQs"
                ],
                "summary": "Add FAQ to event (organizer only)",
                "operationId": "2958485b352705b5b572f8174f98f019",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "question",
                                    "answer"
                                ],
                                "properties": {
                                    "question": {
                                        "type": "string",
                                        "maxLength": 500,
                                        "example": "Where can I park?"
                                    },
                                    "answer": {
                                        "type": "string",
                                        "maxLength": 2000,
                                        "example": "Free parking available at main entrance"
                                    },
                                    "order_position": {
                                        "description": "Display order (optional)",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "FAQ created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "FAQ created successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized - Not the event organizer"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/faqs/{faqId}": {
            "get": {
                "tags": [
                    "Event FAQs"
                ],
                "summary": "Get single FAQ details",
                "operationId": "8ade79ad862988a703bfd4f13d5637e4",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "faqId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FAQ details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "FAQ not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Event FAQs"
                ],
                "summary": "Update FAQ (organizer only)",
                "operationId": "5a9e83da3c62f91d88c04c02844cdca1",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "faqId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "question": {
                                        "type": "string",
                                        "maxLength": 500
                                    },
                                    "answer": {
                                        "type": "string",
                                        "maxLength": 2000
                                    },
                                    "order_position": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "FAQ updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "FAQ not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Event FAQs"
                ],
                "summary": "Delete FAQ (organizer only)",
                "operationId": "1d5bc40859748fbf2626d15dcb6b11b8",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "faqId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FAQ deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "FAQ deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "FAQ not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/faqs/reorder": {
            "post": {
                "tags": [
                    "Event FAQs"
                ],
                "summary": "Reorder FAQs (organizer only)",
                "operationId": "8b3ebd40e15befaef6a4ce4062b7603a",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "faqs"
                                ],
                                "properties": {
                                    "faqs": {
                                        "description": "Array of FAQ IDs in desired order",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            3,
                                            1,
                                            2,
                                            5,
                                            4
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "FAQs reordered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "FAQs reordered successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/faqs/bulk-delete": {
            "delete": {
                "tags": [
                    "Event FAQs"
                ],
                "summary": "Delete multiple FAQs (organizer only)",
                "operationId": "abf1abff62f1893651a91ba17d9bfc00",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "faq_ids"
                                ],
                                "properties": {
                                    "faq_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2,
                                            3
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "FAQs deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "deleted_count": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/faqs/search": {
            "get": {
                "tags": [
                    "Event FAQs"
                ],
                "summary": "Search FAQs",
                "operationId": "12b65ca42beb80841a3f099892a3b4fa",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Search query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/events/{eventId}/favorite": {
            "post": {
                "tags": [
                    "Event Favorites"
                ],
                "summary": "Add event to favorites (auth required)",
                "operationId": "32bf52e047aa6e5a09669f96ec9b68ec",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "Event ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event added to favorites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Event added to favorites"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Event already in favorites"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Event not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/unfavorite": {
            "delete": {
                "tags": [
                    "Event Favorites"
                ],
                "summary": "Remove event from favorites (auth required)",
                "operationId": "0ea63dc850356bdd06901899ad9c0093",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event removed from favorites",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-favorite-events": {
            "get": {
                "tags": [
                    "Event Favorites"
                ],
                "summary": "Get my favorite events (auth required)",
                "operationId": "19ae18321cba5de987f6736de7b2f5b8",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "upcoming",
                                "ongoing",
                                "completed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of favorite events",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/is-favorite": {
            "get": {
                "tags": [
                    "Event Favorites"
                ],
                "summary": "Check if event is in favorites (auth required)",
                "operationId": "639e0f4382f4bdce84b42ec7777075be",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "is_favorite": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/toggle-favorite": {
            "post": {
                "tags": [
                    "Event Favorites"
                ],
                "summary": "Toggle favorite status (auth required)",
                "operationId": "12baeb04a224a9ae8456f2ebc701a123",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite toggled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "is_favorite": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-favorite-events/clear": {
            "delete": {
                "tags": [
                    "Event Favorites"
                ],
                "summary": "Clear all favorites (auth required)",
                "operationId": "01d25aec8bce6e2731a0789c9fa4a154",
                "responses": {
                    "200": {
                        "description": "All favorites cleared",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "deleted_count": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-favorite-events/count": {
            "get": {
                "tags": [
                    "Event Favorites"
                ],
                "summary": "Get favorites count (auth required)",
                "operationId": "f4f8672cb06dbaad3d5420a19aebc37a",
                "responses": {
                    "200": {
                        "description": "Favorites count",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 5
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/register": {
            "post": {
                "tags": [
                    "Event Participants"
                ],
                "summary": "Register for an event (auth required)",
                "operationId": "e8a9b76e5fc62028837dbbb7a2444845",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "notes": {
                                        "type": "string",
                                        "example": "Any special requirements"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Registration successful"
                    },
                    "400": {
                        "description": "Registration closed or already registered"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/unregister": {
            "delete": {
                "tags": [
                    "Event Participants"
                ],
                "summary": "Unregister from an event (auth required)",
                "operationId": "627a2d059f9c4f5cb1ece695d7789097",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Unregistration successful"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Registration not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/participants": {
            "get": {
                "tags": [
                    "Event Participants"
                ],
                "summary": "Get event participants",
                "operationId": "22314fca492bed4bd35f811fb3bcad14",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "registered",
                                "confirmed",
                                "attended",
                                "cancelled"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of participants"
                    }
                }
            }
        },
        "/api/my-events": {
            "get": {
                "tags": [
                    "Event Participants"
                ],
                "summary": "Get my registered events (auth required)",
                "operationId": "137751d012d12899d77e79c3aff2754b",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of my events"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/participants/{participantId}/confirm": {
            "put": {
                "tags": [
                    "Event Participants"
                ],
                "summary": "Confirm a participant (organizer only)",
                "operationId": "146c5a28db14bd91e9c0ce681fbbeb02",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Participant confirmed"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/participants/{participantId}/check-in": {
            "put": {
                "tags": [
                    "Event Participants"
                ],
                "summary": "Mark participant as attended (organizer only)",
                "operationId": "6ac728b7908f45171cd1986149624be0",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Participant checked in"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/participants/statistics": {
            "get": {
                "tags": [
                    "Event Participants"
                ],
                "summary": "Get participants statistics (organizer only)",
                "operationId": "aba5b56d6d3f1d9664cd391240452cd3",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Participants statistics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total": {
                                            "type": "integer"
                                        },
                                        "registered": {
                                            "type": "integer"
                                        },
                                        "confirmed": {
                                            "type": "integer"
                                        },
                                        "attended": {
                                            "type": "integer"
                                        },
                                        "cancelled": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/participants/{participantId}": {
            "get": {
                "tags": [
                    "Event Participants"
                ],
                "summary": "Get participant details (organizer only)",
                "operationId": "377337faf8c302c02844dc57bf5ff94a",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Participant details"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/my-registration": {
            "get": {
                "tags": [
                    "Event Participants"
                ],
                "summary": "Get my registration status for event (auth required)",
                "operationId": "33ad83919bf742327163eb00869fa52e",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "is_registered": {
                                            "type": "boolean"
                                        },
                                        "registration": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/reviews": {
            "get": {
                "tags": [
                    "Event Reviews"
                ],
                "summary": "Get event reviews",
                "operationId": "53229461da02627ee0f65b446f767aed",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "rating",
                        "in": "query",
                        "description": "Filter by rating",
                        "schema": {
                            "type": "integer",
                            "maximum": 5,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of reviews with statistics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "reviews": {
                                            "type": "object"
                                        },
                                        "statistics": {
                                            "properties": {
                                                "average_rating": {
                                                    "type": "number"
                                                },
                                                "total_reviews": {
                                                    "type": "integer"
                                                },
                                                "rating_distribution": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Event Reviews"
                ],
                "summary": "Add a review for an event (auth required, must have participated)",
                "operationId": "fb4416b16a3024aef8e9442d02509926",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "rating"
                                ],
                                "properties": {
                                    "rating": {
                                        "type": "integer",
                                        "maximum": 5,
                                        "minimum": 1,
                                        "example": 5
                                    },
                                    "comment": {
                                        "type": "string",
                                        "maxLength": 2000,
                                        "example": "Amazing event! Very well organized."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Review added successfully"
                    },
                    "400": {
                        "description": "Already reviewed"
                    },
                    "403": {
                        "description": "Not participated"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/reviews/{reviewId}": {
            "get": {
                "tags": [
                    "Event Reviews"
                ],
                "summary": "Get single review details",
                "operationId": "f0abebb2575446ad680fbd91ffdffddf",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "reviewId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review details"
                    },
                    "404": {
                        "description": "Review not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Event Reviews"
                ],
                "summary": "Update a review (auth required, owner only)",
                "operationId": "49a19420b1ecc2fa8659b4a8afdc7b96",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "reviewId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "rating": {
                                        "type": "integer",
                                        "maximum": 5,
                                        "minimum": 1
                                    },
                                    "comment": {
                                        "type": "string",
                                        "maxLength": 2000
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Review updated successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Review not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Event Reviews"
                ],
                "summary": "Delete a review (auth required, owner only)",
                "operationId": "6bb7019a833cd9dd52bfc6144be01daf",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "reviewId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review deleted successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Review not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/my-review": {
            "get": {
                "tags": [
                    "Event Reviews"
                ],
                "summary": "Get my review for event (auth required)",
                "operationId": "f25861e05a7cf4d9944bb956dbb2e921",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "My review or null",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "has_reviewed": {
                                            "type": "boolean"
                                        },
                                        "review": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/reviews/can-review": {
            "get": {
                "tags": [
                    "Event Reviews"
                ],
                "summary": "Check if user can review event (auth required)",
                "operationId": "ac5afab3eca238aff35ce7d0f1e7e7e9",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review eligibility status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "can_review": {
                                            "type": "boolean"
                                        },
                                        "reason": {
                                            "type": "string",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-reviews": {
            "get": {
                "tags": [
                    "Event Reviews"
                ],
                "summary": "Get all my reviews (auth required)",
                "operationId": "15efaf8734742c8bfd7acbaf3be50626",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of my reviews"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/event-sponsors": {
            "get": {
                "tags": [
                    "Event Sponsors"
                ],
                "summary": "Get all sponsors",
                "operationId": "38a24866d805b058d7d32d83a644c3e7",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search by name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sponsors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Event Sponsors"
                ],
                "summary": "Create a new sponsor (auth required)",
                "operationId": "35eaed690257331353bfdc95d2e1f5d9",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Red Bull"
                                    },
                                    "logo": {
                                        "type": "string",
                                        "example": "https://example.com/logo.png"
                                    },
                                    "website": {
                                        "type": "string",
                                        "example": "https://www.redbull.com"
                                    },
                                    "description": {
                                        "type": "string",
                                        "maxLength": 1000,
                                        "example": "Main event sponsor"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Sponsor created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/event-sponsors/{id}": {
            "get": {
                "tags": [
                    "Event Sponsors"
                ],
                "summary": "Get sponsor details",
                "operationId": "597c460c789e07784cd2b6c56af55577",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sponsor details with associated events",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Sponsor not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Event Sponsors"
                ],
                "summary": "Update a sponsor (auth required)",
                "operationId": "04d47bd80b6b3488486a096c310373cc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "logo": {
                                        "type": "string"
                                    },
                                    "website": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Sponsor updated successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Sponsor not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Event Sponsors"
                ],
                "summary": "Delete a sponsor (auth required)",
                "operationId": "9b91f7e2516f173d9bf92e55081639b6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sponsor deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Sponsor not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/sponsors/{sponsorId}/attach": {
            "post": {
                "tags": [
                    "Event Sponsors"
                ],
                "summary": "Attach sponsor to event (organizer only)",
                "operationId": "ef999dafcc29a2579ef6356507ddea31",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sponsorId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "sponsorship_level": {
                                        "type": "string",
                                        "enum": [
                                            "platinum",
                                            "gold",
                                            "silver",
                                            "bronze"
                                        ],
                                        "example": "gold"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Sponsor attached to event successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/sponsors/{sponsorId}/detach": {
            "delete": {
                "tags": [
                    "Event Sponsors"
                ],
                "summary": "Remove sponsor from event (organizer only)",
                "operationId": "6e7fb20375546dab7d9beb431bb837b5",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sponsorId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sponsor removed from event successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/sponsors": {
            "get": {
                "tags": [
                    "Event Sponsors"
                ],
                "summary": "Get event sponsors",
                "operationId": "7e08cdf6a39d9fa49e667ee1db5882a1",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Filter by sponsorship level",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of event sponsors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/events/{eventId}/sponsors/{sponsorId}/update-level": {
            "put": {
                "tags": [
                    "Event Sponsors"
                ],
                "summary": "Update sponsor level (organizer only)",
                "operationId": "49f11f5ef078746155c2072ec2b89d7c",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sponsorId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "sponsorship_level"
                                ],
                                "properties": {
                                    "sponsorship_level": {
                                        "type": "string",
                                        "enum": [
                                            "platinum",
                                            "gold",
                                            "silver",
                                            "bronze"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Sponsorship level updated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/tickets": {
            "get": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Get event tickets",
                "operationId": "5800f4dd37fab814b1fa2e0265856076",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "available_only",
                        "in": "query",
                        "description": "Show only available tickets",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of event tickets",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Create a ticket type (organizer only)",
                "operationId": "22c50b9b73e1285660b8f032d5e44442",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "ticket_type",
                                    "price"
                                ],
                                "properties": {
                                    "ticket_type": {
                                        "type": "string",
                                        "example": "VIP Pass"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 300
                                    },
                                    "quantity_available": {
                                        "type": "integer",
                                        "example": 50
                                    },
                                    "description": {
                                        "type": "string",
                                        "maxLength": 1000
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Ticket created successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/tickets/{ticketId}": {
            "get": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Get ticket details",
                "operationId": "17ea92f7e0b1d7f4646ed6e5aa7172b6",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ticketId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket details"
                    },
                    "404": {
                        "description": "Ticket not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Update a ticket type (organizer only)",
                "operationId": "1c4516c0df694d0ce2dd49851b1f713f",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ticketId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ticket_type": {
                                        "type": "string"
                                    },
                                    "price": {
                                        "type": "number"
                                    },
                                    "quantity_available": {
                                        "type": "integer"
                                    },
                                    "is_active": {
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ticket updated successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Delete a ticket type (organizer only)",
                "operationId": "8b2322cdd3d61afc957d38cdd0253cee",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ticketId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket deleted successfully"
                    },
                    "400": {
                        "description": "Cannot delete ticket with purchases"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/tickets/{ticketId}/purchase": {
            "post": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Purchase a ticket (auth required)",
                "operationId": "ea6ee64fe0d44092e2cc30314c3871af",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ticketId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "quantity"
                                ],
                                "properties": {
                                    "quantity": {
                                        "type": "integer",
                                        "maximum": 10,
                                        "minimum": 1,
                                        "example": 2
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Purchase successful"
                    },
                    "400": {
                        "description": "Ticket not available or insufficient quantity"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-tickets": {
            "get": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Get my purchased tickets (auth required)",
                "operationId": "6fc1c754859211a71fa38a29375c3f41",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "event_id",
                        "in": "query",
                        "description": "Filter by event",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of purchased tickets"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/tickets/statistics": {
            "get": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Get tickets statistics (organizer only)",
                "operationId": "5f04bf6c31991815576cc1ae170d77fa",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tickets statistics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_tickets_sold": {
                                            "type": "integer"
                                        },
                                        "total_revenue": {
                                            "type": "number"
                                        },
                                        "ticket_types": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/{purchaseId}": {
            "get": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Get ticket purchase details (auth required)",
                "operationId": "aff8d7839e0b195c5ff7df95463c8e8e",
                "parameters": [
                    {
                        "name": "purchaseId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket purchase details"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/{purchaseId}/check-in": {
            "post": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Check in ticket (organizer only)",
                "operationId": "5d861e8c24dcfa6131ceeb49d598424e",
                "parameters": [
                    {
                        "name": "purchaseId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket checked in successfully"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "400": {
                        "description": "Already checked in"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/verify/{qrCode}": {
            "get": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Verify ticket by QR code (organizer only)",
                "operationId": "75ac5e2cbb582140787d8e03edee5bdd",
                "parameters": [
                    {
                        "name": "qrCode",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket verification result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "valid": {
                                            "type": "boolean"
                                        },
                                        "ticket": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/tickets/purchases": {
            "get": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Get all ticket purchases for event (organizer only)",
                "operationId": "5e21930d5d2934d0926811030e984f53",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "checked_in",
                        "in": "query",
                        "description": "Filter by check-in status",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of ticket purchases"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/tickets/{ticketId}/toggle-active": {
            "post": {
                "tags": [
                    "Event Tickets"
                ],
                "summary": "Activate/Deactivate a ticket type (organizer only)",
                "operationId": "657f65085a5ae4865eb901773a93e9af",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ticketId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket status toggled"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/updates": {
            "get": {
                "tags": [
                    "Event Updates"
                ],
                "summary": "Get event updates",
                "operationId": "72944b8f4b83dc9832d2b2f76c2d50c1",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "important_only",
                        "in": "query",
                        "description": "Show only important updates",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of event updates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "title": {
                                                                "type": "string"
                                                            },
                                                            "content": {
                                                                "type": "string"
                                                            },
                                                            "is_important": {
                                                                "type": "boolean"
                                                            },
                                                            "posted_by": {
                                                                "type": "object"
                                                            },
                                                            "created_at": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Event not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Event Updates"
                ],
                "summary": "Post an update (organizer only)",
                "operationId": "eb925a965ef0fc5e0f1ba779231da4a1",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "content"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Schedule Change"
                                    },
                                    "content": {
                                        "type": "string",
                                        "example": "Main race now starts at 2 PM"
                                    },
                                    "is_important": {
                                        "description": "Mark as important update",
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Update created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/updates/{updateId}": {
            "get": {
                "tags": [
                    "Event Updates"
                ],
                "summary": "Get single update details",
                "operationId": "0c7b64212f59502176be68d9e5b6085c",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "updateId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Update not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Event Updates"
                ],
                "summary": "Edit an update (organizer only)",
                "operationId": "27bffbb895cd6125d4d446e00faa9caa",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "updateId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    "content": {
                                        "type": "string"
                                    },
                                    "is_important": {
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update modified successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Event Updates"
                ],
                "summary": "Delete an update (organizer only)",
                "operationId": "ae3ad64f5ec67f7f0d7afa32193c5185",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "updateId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Update deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/events/{eventId}/updates/important": {
            "get": {
                "tags": [
                    "Event Updates"
                ],
                "summary": "Get important updates only",
                "operationId": "d62d50cb9b600caa80fd1c107f4e9bd2",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of important updates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/events/{eventId}/updates/latest": {
            "get": {
                "tags": [
                    "Event Updates"
                ],
                "summary": "Get latest update",
                "operationId": "d96fe80cbfd3189fd25c35fb52d80174",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest update",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/events/{eventId}/updates/bulk-delete": {
            "delete": {
                "tags": [
                    "Event Updates"
                ],
                "summary": "Delete multiple updates (organizer only)",
                "operationId": "d5891185210870daba3f53b645ec157d",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "update_ids"
                                ],
                                "properties": {
                                    "update_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2,
                                            3
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updates deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "deleted_count": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-event-updates": {
            "get": {
                "tags": [
                    "Event Updates"
                ],
                "summary": "Get all updates from my registered events (auth required)",
                "operationId": "8466aba4849554b06c4db4a04cf6f47b",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "important_only",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of updates from registered events",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/filter/motorcycles": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "summary": "Filter motorcycles",
                "description": "Filter motorcycles by category, price, brand, model, year, condition, mileage, seller type and location",
                "operationId": "filterMotorcycles",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Category ID filter (1=motorcycles, 2=cars, etc.)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Filter by country name (supports partial matching). If no results found, shows all countries.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Morocco"
                        }
                    },
                    {
                        "name": "min_price",
                        "in": "query",
                        "description": "Minimum price filter (includes fixed price and minimum bid for auctions)",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "max_price",
                        "in": "query",
                        "description": "Maximum price filter (includes fixed price and minimum bid for auctions)",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "brands[]",
                        "in": "query",
                        "description": "Array of brand IDs to filter",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "models[]",
                        "in": "query",
                        "description": "Array of model IDs to filter",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "types[]",
                        "in": "query",
                        "description": "Array of motorcycle type IDs to filter",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "years[]",
                        "in": "query",
                        "description": "Array of year IDs to filter",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "condition",
                        "in": "query",
                        "description": "Motorcycle condition",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "new",
                                "used",
                                "excellent",
                                "good",
                                "fair",
                                "poor"
                            ]
                        }
                    },
                    {
                        "name": "min_mileage",
                        "in": "query",
                        "description": "Minimum mileage filter",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "max_mileage",
                        "in": "query",
                        "description": "Maximum mileage filter",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "seller_type",
                        "in": "query",
                        "description": "Type of seller",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "individual",
                                "professional",
                                "dealer"
                            ]
                        }
                    },
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Country ID filter (alternative to country name)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "city_id",
                        "in": "query",
                        "description": "City ID filter",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "example": 1
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page (default: 15, max: 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/filter/spare-parts": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "summary": "Filter spare parts",
                "description": "Filter spare parts by price, brand, category, condition, location and country name",
                "operationId": "filterSpareParts",
                "parameters": [
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Filter by country name",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Morocco"
                        }
                    },
                    {
                        "name": "min_price",
                        "in": "query",
                        "description": "Minimum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "max_price",
                        "in": "query",
                        "description": "Maximum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "bike_part_brands[]",
                        "in": "query",
                        "description": "Array of bike part brand IDs",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "bike_part_categories[]",
                        "in": "query",
                        "description": "Array of bike part category IDs",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "condition",
                        "in": "query",
                        "description": "Spare part condition",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "new",
                                "used",
                                "excellent",
                                "good",
                                "fair",
                                "poor"
                            ]
                        }
                    },
                    {
                        "name": "seller_type",
                        "in": "query",
                        "description": "Type of seller",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "individual",
                                "professional",
                                "dealer"
                            ]
                        }
                    },
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Country ID filter",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "city_id",
                        "in": "query",
                        "description": "City ID filter",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "example": 1
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/filter/license-plates": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "summary": "Filter license plates",
                "description": "Filter license plates by price, country, city, format, plate fields and country name",
                "operationId": "filterLicensePlates",
                "parameters": [
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Filter by country name",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Morocco"
                        }
                    },
                    {
                        "name": "min_price",
                        "in": "query",
                        "description": "Minimum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "max_price",
                        "in": "query",
                        "description": "Maximum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "seller_type",
                        "in": "query",
                        "description": "Type of seller",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "individual",
                                "professional",
                                "dealer"
                            ]
                        }
                    },
                    {
                        "name": "listing_country_id",
                        "in": "query",
                        "description": "Filter by listing country ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "listing_city_id",
                        "in": "query",
                        "description": "Filter by listing city ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "plate_country_id",
                        "in": "query",
                        "description": "Filter by plate country ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "plate_city_id",
                        "in": "query",
                        "description": "Filter by plate city ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "plate_format_id",
                        "in": "query",
                        "description": "Filter by license plate format ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "plate_search",
                        "in": "query",
                        "description": "Search value within license plate fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "example": 1
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/filter-options-license-plates": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "summary": "Get license plate filter options",
                "description": "Returns available filter options (countries, cities, formats, fields, price range) for license plates",
                "operationId": "getLicensePlateFilterOptions",
                "responses": {
                    "200": {
                        "description": "Filter options retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/guides/{id}/bookmark": {
            "post": {
                "tags": [
                    "Guide Bookmarks"
                ],
                "summary": "Ajouter un guide aux favoris",
                "operationId": "3cdf4fcab89a69bda88e7d75b41b305f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guide ajouté aux favoris avec succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Guide ajouté aux favoris avec succès"
                                        },
                                        "data": {
                                            "properties": {
                                                "guide_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "bookmarked": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "bookmarked_at": {
                                                    "type": "string",
                                                    "example": "2025-10-17 10:30:00"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé"
                    },
                    "401": {
                        "description": "Non authentifié"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{id}/unbookmark": {
            "delete": {
                "tags": [
                    "Guide Bookmarks"
                ],
                "summary": "Retirer un guide des favoris",
                "operationId": "ae74fd652c40696efd753d690534bdc1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guide retiré des favoris avec succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Guide retiré des favoris avec succès"
                                        },
                                        "data": {
                                            "properties": {
                                                "guide_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "bookmarked": {
                                                    "type": "boolean",
                                                    "example": false
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé ou bookmark inexistant"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{id}/toggle-bookmark": {
            "post": {
                "tags": [
                    "Guide Bookmarks"
                ],
                "summary": "Toggle bookmark d'un guide (bookmark/unbookmark automatique)",
                "operationId": "95a089921810d6ad9cd22f350f58c0d1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Toggle effectué avec succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Guide ajouté aux favoris avec succès"
                                        },
                                        "data": {
                                            "properties": {
                                                "guide_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "bookmarked": {
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/my/bookmarks": {
            "get": {
                "tags": [
                    "Guide Bookmarks"
                ],
                "summary": "Liste des guides bookmarkés par l'utilisateur connecté",
                "operationId": "92772b8b07ba0d711991c304c339d2ce",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Numéro de page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Nombre d'éléments par page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Tri: latest (bookmarkés récemment), oldest, title",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "latest",
                            "enum": [
                                "latest",
                                "oldest",
                                "title"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des guides bookmarkés",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total": {
                                            "type": "integer",
                                            "example": 25
                                        },
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "bookmarks": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "title": {
                                                        "type": "string",
                                                        "example": "Guide complet de maintenance"
                                                    },
                                                    "slug": {
                                                        "type": "string",
                                                        "example": "guide-complet-maintenance"
                                                    },
                                                    "excerpt": {
                                                        "type": "string"
                                                    },
                                                    "featured_image": {
                                                        "type": "string"
                                                    },
                                                    "views_count": {
                                                        "type": "integer"
                                                    },
                                                    "bookmarked_at": {
                                                        "type": "string",
                                                        "example": "2025-10-17 10:30:00"
                                                    },
                                                    "author": {
                                                        "properties": {
                                                            "name": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "category": {
                                                        "properties": {
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "slug": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/my/bookmarks/count": {
            "get": {
                "tags": [
                    "Guide Bookmarks"
                ],
                "summary": "Nombre de guides bookmarkés",
                "operationId": "5617775251e58f0f7bd8adfbc82982eb",
                "responses": {
                    "200": {
                        "description": "Nombre de bookmarks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "count": {
                                            "type": "integer",
                                            "example": 25
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/my/bookmarks/clear": {
            "delete": {
                "tags": [
                    "Guide Bookmarks"
                ],
                "summary": "Supprimer tous les bookmarks de l'utilisateur",
                "operationId": "b880cb12b9c3f194a93299c34bdb6bca",
                "responses": {
                    "200": {
                        "description": "Tous les favoris ont été supprimés",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tous les favoris ont été supprimés avec succès"
                                        },
                                        "deleted_count": {
                                            "type": "integer",
                                            "example": 12
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{id}/bookmark-status": {
            "get": {
                "tags": [
                    "Guide Bookmarks"
                ],
                "summary": "Vérifier si un guide est bookmarké par l'utilisateur",
                "operationId": "6db71c55c332d78abe9cbd137a47d588",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statut du bookmark",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "guide_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "bookmarked": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "bookmarked_at": {
                                            "type": "string",
                                            "example": "2025-10-17 10:30:00"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/bookmarks/batch": {
            "post": {
                "tags": [
                    "Guide Bookmarks"
                ],
                "summary": "Vérifier le statut bookmark de plusieurs guides",
                "operationId": "e7603b570656dfd7a17b1d00347fef0e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "guide_ids"
                                ],
                                "properties": {
                                    "guide_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Statuts des bookmarks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "guide_id": {
                                                "type": "integer"
                                            },
                                            "bookmarked": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/categories": {
            "get": {
                "tags": [
                    "Guide Categories"
                ],
                "summary": "Liste toutes les catégories de guides",
                "operationId": "4ba8df2b3bc886b0e5a7e88598a24101",
                "responses": {
                    "200": {
                        "description": "Liste des catégories"
                    }
                }
            },
            "post": {
                "tags": [
                    "Guide Categories"
                ],
                "summary": "Créer une nouvelle catégorie",
                "operationId": "53f7a1adbe3118aeeee7c5ba226d350d",
                "responses": {
                    "201": {
                        "description": "Catégorie créée"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/categories/{id}": {
            "get": {
                "tags": [
                    "Guide Categories"
                ],
                "summary": "Afficher les détails d'une catégorie",
                "operationId": "dea57fd4f7ecb11e824e127e3f05158d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Détails de la catégorie"
                    }
                }
            },
            "put": {
                "tags": [
                    "Guide Categories"
                ],
                "summary": "Mettre à jour une catégorie",
                "operationId": "c9a82abd851b94d1b910a3fc0739f6c7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Catégorie mise à jour"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Guide Categories"
                ],
                "summary": "Supprimer une catégorie",
                "operationId": "83c6368e6bca8f4041f188f0453b9cd0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Catégorie supprimée"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/categories/{id}/guides": {
            "get": {
                "tags": [
                    "Guide Categories"
                ],
                "summary": "Obtenir tous les guides d'une catégorie",
                "operationId": "fb7059fc5050458876fdbf88a3244986",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des guides"
                    }
                }
            }
        },
        "/api/guides/{id}/comments": {
            "get": {
                "tags": [
                    "Guide Comments"
                ],
                "summary": "Liste tous les commentaires d'un guide",
                "operationId": "e11988f6880acac86cc05e930080b0d2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Tri: latest, oldest",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "latest",
                            "enum": [
                                "latest",
                                "oldest"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des commentaires",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "guide_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "total_comments": {
                                            "type": "integer",
                                            "example": 25
                                        },
                                        "comments": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "content": {
                                                        "type": "string"
                                                    },
                                                    "is_approved": {
                                                        "type": "boolean"
                                                    },
                                                    "created_at": {
                                                        "type": "string"
                                                    },
                                                    "user": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "profile_picture": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "replies": {
                                                        "type": "array",
                                                        "items": {
                                                            "$ref": "#"
                                                        }
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé"
                    }
                }
            },
            "post": {
                "tags": [
                    "Guide Comments"
                ],
                "summary": "Ajouter un commentaire à un guide",
                "operationId": "f1dc21f315bad87d0ce25103847c8ee5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "content"
                                ],
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "example": "Excellent guide, très utile!"
                                    },
                                    "parent_id": {
                                        "description": "ID du commentaire parent pour les réponses",
                                        "type": "integer",
                                        "example": null
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Commentaire créé avec succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Commentaire ajouté avec succès"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "content": {
                                                    "type": "string"
                                                },
                                                "created_at": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé"
                    },
                    "422": {
                        "description": "Erreur de validation"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/comments/{commentId}": {
            "put": {
                "tags": [
                    "Guide Comments"
                ],
                "summary": "Modifier un commentaire",
                "operationId": "e50b1bb1d189773f7d8055388e11489d",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "ID du commentaire",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "content"
                                ],
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "example": "Commentaire mis à jour"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Commentaire mis à jour avec succès"
                    },
                    "403": {
                        "description": "Non autorisé"
                    },
                    "404": {
                        "description": "Commentaire non trouvé"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Guide Comments"
                ],
                "summary": "Supprimer un commentaire",
                "operationId": "125aed063893e8c06aea82b393338a27",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "ID du commentaire",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commentaire supprimé avec succès"
                    },
                    "403": {
                        "description": "Non autorisé"
                    },
                    "404": {
                        "description": "Commentaire non trouvé"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/comments/{commentId}/approve": {
            "post": {
                "tags": [
                    "Guide Comments"
                ],
                "summary": "Approuver un commentaire (Admin uniquement)",
                "operationId": "e79a53c1eb8d6b4e8009a0fb99064ba9",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "ID du commentaire",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commentaire approuvé avec succès"
                    },
                    "403": {
                        "description": "Non autorisé - Admin uniquement"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/comments/{commentId}/reject": {
            "post": {
                "tags": [
                    "Guide Comments"
                ],
                "summary": "Rejeter un commentaire (Admin uniquement)",
                "operationId": "702eb42c4e472f90c1bf2eb69ff1d17d",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "ID du commentaire",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Commentaire rejeté avec succès"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/comments/pending": {
            "get": {
                "tags": [
                    "Guide Comments"
                ],
                "summary": "Liste des commentaires en attente de modération (Admin)",
                "operationId": "b13761e86c85c8d1c61265559e16cdb9",
                "responses": {
                    "200": {
                        "description": "Liste des commentaires en attente"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/my/comments": {
            "get": {
                "tags": [
                    "Guide Comments"
                ],
                "summary": "Mes commentaires",
                "operationId": "49092f276ed86ff17e37108c8e6618f0",
                "responses": {
                    "200": {
                        "description": "Liste de mes commentaires"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Liste tous les guides avec filtres",
                "operationId": "5925d903e77ac2895e3a78a86aea5655",
                "responses": {
                    "200": {
                        "description": "Liste des guides"
                    }
                }
            },
            "post": {
                "tags": [
                    "Guides"
                ],
                "summary": "Créer un nouveau guide",
                "operationId": "0abfb96706973527a28536a11e02be8b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "content"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Complete Motorcycle Maintenance Guide"
                                    },
                                    "content": {
                                        "type": "string",
                                        "example": "This comprehensive guide covers all aspects of motorcycle maintenance..."
                                    },
                                    "excerpt": {
                                        "type": "string",
                                        "example": "Learn how to maintain your motorcycle properly"
                                    },
                                    "featured_image": {
                                        "type": "string",
                                        "example": "https://example.com/maintenance-cover.jpg"
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "tags": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2,
                                            3
                                        ]
                                    },
                                    "is_featured": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "image_url": {
                                                    "type": "string",
                                                    "example": "https://example.com/image1.jpg"
                                                },
                                                "caption": {
                                                    "type": "string",
                                                    "example": "Oil change procedure"
                                                },
                                                "order_position": {
                                                    "type": "integer",
                                                    "example": 0
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Guide créé avec succès"
                    },
                    "422": {
                        "description": "Erreur de validation"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{slug}": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Afficher les détails d'un guide",
                "operationId": "3def2a2b674d267256f5000120f78789",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Détails du guide"
                    }
                }
            }
        },
        "/api/guides/{id}": {
            "put": {
                "tags": [
                    "Guides"
                ],
                "summary": "Mettre à jour un guide",
                "operationId": "e1dc1c6b10d1890d4812b5dbf0f052f1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guide mis à jour"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Guides"
                ],
                "summary": "Supprimer un guide",
                "operationId": "dc4abf952eb4abf688a099b642b84751",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guide supprimé"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/featured": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Guides mis en avant",
                "operationId": "67d9d778da3ccccd7880227dce8278be",
                "responses": {
                    "200": {
                        "description": "Guides featured"
                    }
                }
            }
        },
        "/api/guides/popular": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Guides populaires",
                "operationId": "f8015f1ef5e34813d0e1e4ec24c875c2",
                "responses": {
                    "200": {
                        "description": "Guides populaires"
                    }
                }
            }
        },
        "/api/guides/latest": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Derniers guides",
                "operationId": "34717a09e14f3d7b2371210b689708c2",
                "responses": {
                    "200": {
                        "description": "Derniers guides"
                    }
                }
            }
        },
        "/api/guides/{id}/publish": {
            "post": {
                "tags": [
                    "Guides"
                ],
                "summary": "Publier un guide",
                "operationId": "a143c91571e8f8c4d9efb2cd1b0c0216",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guide publié"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{id}/archive": {
            "post": {
                "tags": [
                    "Guides"
                ],
                "summary": "Archiver un guide",
                "operationId": "ada5334f84c02e9f15467cbd6c39a3bc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guide archivé"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/my/guides": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Mes guides",
                "operationId": "46747724ab63fa0fef7a5e7f5ecf739a",
                "responses": {
                    "200": {
                        "description": "Mes guides"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/id/{id}": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Afficher les détails d'un guide par ID",
                "operationId": "f4d1bfed474b5ad96928e6c56262aa8d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Détails du guide"
                    },
                    "404": {
                        "description": "Guide non trouvé"
                    }
                }
            }
        },
        "/api/guides/category/{category_id}": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Liste des guides par catégorie",
                "operationId": "15c4ebac030bf00ec6b4609def75238e",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Tri: latest, popular",
                        "schema": {
                            "type": "string",
                            "default": "latest",
                            "enum": [
                                "latest",
                                "popular"
                            ]
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Nombre de résultats",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des guides de la catégorie"
                    }
                }
            }
        },
        "/api/guides/tag/{tag_slug}": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Liste des guides par tag (slug)",
                "operationId": "2ecc9d06685e23de6cb3f93d20582bb4",
                "parameters": [
                    {
                        "name": "tag_slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Tri: latest, popular",
                        "schema": {
                            "type": "string",
                            "default": "latest",
                            "enum": [
                                "latest",
                                "popular"
                            ]
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Nombre de résultats",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des guides du tag"
                    }
                }
            }
        },
        "/api/guides/tag/id/{tag_id}": {
            "get": {
                "tags": [
                    "Guides"
                ],
                "summary": "Liste des guides par tag ID",
                "operationId": "dc6ce8becb88f80222ccae3233c5cde3",
                "parameters": [
                    {
                        "name": "tag_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Tri: latest, popular",
                        "schema": {
                            "type": "string",
                            "default": "latest",
                            "enum": [
                                "latest",
                                "popular"
                            ]
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Nombre de résultats",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des guides du tag"
                    }
                }
            }
        },
        "/api/guides/{guide_id}/images": {
            "get": {
                "tags": [
                    "Guide Images"
                ],
                "summary": "Liste toutes les images d'un guide",
                "operationId": "f30a3163d4449826d554390cb531417f",
                "parameters": [
                    {
                        "name": "guide_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des images"
                    }
                }
            },
            "post": {
                "tags": [
                    "Guide Images"
                ],
                "summary": "Ajouter une image à un guide",
                "operationId": "3c933cd50dd525b13780f735e109aca4",
                "parameters": [
                    {
                        "name": "guide_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Image ajoutée"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{guide_id}/images/{id}": {
            "put": {
                "tags": [
                    "Guide Images"
                ],
                "summary": "Mettre à jour une image",
                "operationId": "d57880ba873d71d190ae3317bedbeb64",
                "parameters": [
                    {
                        "name": "guide_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image mise à jour"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Guide Images"
                ],
                "summary": "Supprimer une image",
                "operationId": "7bc93b01495734742143004dc8e1e748",
                "parameters": [
                    {
                        "name": "guide_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image supprimée"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{guide_id}/images/reorder": {
            "post": {
                "tags": [
                    "Guide Images"
                ],
                "summary": "Réorganiser l'ordre des images",
                "operationId": "8f84aa0617dd1879d553253d18ff128b",
                "parameters": [
                    {
                        "name": "guide_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ordre mis à jour"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{id}/like": {
            "post": {
                "tags": [
                    "Guide Likes"
                ],
                "summary": "Liker un guide",
                "operationId": "f7426133a5efe7c7ce3722158f667774",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guide liké avec succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Guide liké avec succès"
                                        },
                                        "data": {
                                            "properties": {
                                                "guide_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "liked": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "likes_count": {
                                                    "type": "integer",
                                                    "example": 15
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé"
                    },
                    "401": {
                        "description": "Non authentifié"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{id}/unlike": {
            "delete": {
                "tags": [
                    "Guide Likes"
                ],
                "summary": "Unliker un guide",
                "operationId": "88e30024a901ac6b610851d4c0fa3d75",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Like retiré avec succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Like retiré avec succès"
                                        },
                                        "data": {
                                            "properties": {
                                                "guide_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "liked": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "likes_count": {
                                                    "type": "integer",
                                                    "example": 14
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé ou like inexistant"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{id}/toggle-like": {
            "post": {
                "tags": [
                    "Guide Likes"
                ],
                "summary": "Toggle like d'un guide (like/unlike automatique)",
                "operationId": "4221438809d95e3ced82bfd41fa53d7e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Toggle effectué avec succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Guide liké avec succès"
                                        },
                                        "data": {
                                            "properties": {
                                                "guide_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "liked": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "likes_count": {
                                                    "type": "integer",
                                                    "example": 15
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/my/liked": {
            "get": {
                "tags": [
                    "Guide Likes"
                ],
                "summary": "Liste des guides likés par l'utilisateur connecté",
                "operationId": "5d8c4541b7a67a71cbdab34f6e32008a",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Numéro de page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Nombre d'éléments par page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des guides likés",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "title": {
                                                "type": "string",
                                                "example": "Guide complet de maintenance"
                                            },
                                            "slug": {
                                                "type": "string",
                                                "example": "guide-complet-maintenance"
                                            },
                                            "excerpt": {
                                                "type": "string"
                                            },
                                            "featured_image": {
                                                "type": "string"
                                            },
                                            "liked_at": {
                                                "type": "string",
                                                "example": "2025-10-17 10:30:00"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/{id}/likes": {
            "get": {
                "tags": [
                    "Guide Likes"
                ],
                "summary": "Liste des utilisateurs qui ont liké un guide",
                "operationId": "ec4e265af618c28985f49b84e8bad4c4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du guide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des likes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "guide_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "likes_count": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "likes": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "user_id": {
                                                        "type": "integer",
                                                        "example": 5
                                                    },
                                                    "user_name": {
                                                        "type": "string",
                                                        "example": "John Doe"
                                                    },
                                                    "profile_picture": {
                                                        "type": "string"
                                                    },
                                                    "liked_at": {
                                                        "type": "string",
                                                        "example": "2025-10-17 10:30:00"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guide non trouvé"
                    }
                }
            }
        },
        "/api/guides/tags": {
            "get": {
                "tags": [
                    "Guide Tags"
                ],
                "summary": "Liste tous les tags",
                "operationId": "2eaf3f4483f20c20e309d4c201a69f44",
                "responses": {
                    "200": {
                        "description": "Liste des tags"
                    }
                }
            },
            "post": {
                "tags": [
                    "Guide Tags"
                ],
                "summary": "Créer un nouveau tag",
                "operationId": "8d50db3be21680e78304c7d3a56d5aeb",
                "responses": {
                    "201": {
                        "description": "Tag créé"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/tags/{slug}": {
            "get": {
                "tags": [
                    "Guide Tags"
                ],
                "summary": "Afficher les détails d'un tag",
                "operationId": "45819c20fc78b9bece2e51f4fbb02899",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Détails du tag"
                    }
                }
            }
        },
        "/api/guides/tags/{id}": {
            "put": {
                "tags": [
                    "Guide Tags"
                ],
                "summary": "Mettre à jour un tag",
                "operationId": "5081a447489190f4e865f1f19bc0f108",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag mis à jour"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Guide Tags"
                ],
                "summary": "Supprimer un tag",
                "operationId": "754af4a0687f9dc68cb409107f3449a5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag supprimé"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/guides/tags/{slug}/guides": {
            "get": {
                "tags": [
                    "Guide Tags"
                ],
                "summary": "Obtenir tous les guides avec un tag spécifique",
                "operationId": "d74c65a4982fda16ff6c3d72852a5bdd",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des guides"
                    }
                }
            }
        },
        "/api/guides/tags/popular": {
            "get": {
                "tags": [
                    "Guide Tags"
                ],
                "summary": "Obtenir les tags les plus utilisés",
                "operationId": "6c0e4eec38e37a9b402948def5ae99ce",
                "responses": {
                    "200": {
                        "description": "Tags populaires"
                    }
                }
            }
        },
        "/api/upload": {
            "post": {
                "tags": [
                    "Image Upload"
                ],
                "summary": "Upload multiple images",
                "description": "Allows users to upload multiple images to the server with automatic resizing.",
                "operationId": "uploadImages",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "images[]"
                                ],
                                "properties": {
                                    "images[]": {
                                        "description": "Multiple image files to upload (will be automatically resized)",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Images uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Images uploaded successfully"
                                        },
                                        "images": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "original": {
                                                        "type": "string",
                                                        "example": "http://yourdomain.com/storage/listings/image1.jpg"
                                                    },
                                                    "thumbnail": {
                                                        "type": "string",
                                                        "example": "http://yourdomain.com/storage/listings/thumbnails/image1_thumb.jpg"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "No images found in request."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Invalid image format."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "An error occurred while uploading images."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/upload/{filename}": {
            "delete": {
                "tags": [
                    "Image Upload"
                ],
                "summary": "Delete an uploaded image",
                "description": "Delete an uploaded image and its thumbnail",
                "operationId": "deleteImage",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "The filename of the image to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Image deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Image not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/license-plates": {
            "get": {
                "tags": [
                    "License Plates"
                ],
                "summary": "Get all license plates",
                "description": "Retrieve a list of all license plates with their related data",
                "operationId": "17f8fcb33c12ef3bcfa787325a5b56d7",
                "responses": {
                    "200": {
                        "description": "List of license plates retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "license_plates": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "listing_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "country_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "city_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "plate_format_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "city": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Paris"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "format": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Standard Format"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "field_values": {
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer",
                                                                    "example": 1
                                                                },
                                                                "field_value": {
                                                                    "type": "string",
                                                                    "example": "ABC123"
                                                                },
                                                                "format_field": {
                                                                    "properties": {
                                                                        "id": {
                                                                            "type": "integer",
                                                                            "example": 1
                                                                        },
                                                                        "field_name": {
                                                                            "type": "string",
                                                                            "example": "Number"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "License Plates"
                ],
                "summary": "Create a new license plate",
                "description": "Creates a new license plate with associated field values",
                "operationId": "f826ff53cd0009627bea89feeadf1275",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "listing_id",
                                    "country_id",
                                    "city_id",
                                    "plate_format_id",
                                    "fields"
                                ],
                                "properties": {
                                    "listing_id": {
                                        "description": "ID of the listing",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "country_id": {
                                        "description": "ID of the country",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "description": "ID of the city",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "plate_format_id": {
                                        "description": "ID of the plate format",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "fields": {
                                        "description": "Array of field values",
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "field_id": {
                                                    "description": "ID of the format field",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "value": {
                                                    "description": "Value for the field",
                                                    "type": "string",
                                                    "example": "ABC123"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "License plate created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "License plate created successfully"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "description": "Validation errors",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Error message",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/license-plates/{id}": {
            "get": {
                "tags": [
                    "License Plates"
                ],
                "summary": "Get a specific license plate",
                "description": "Retrieve a specific license plate by ID with its related data",
                "operationId": "a3b07dd2f4ad5fb27642435eab0a7bca",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "License plate ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "License plate retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "license_plate": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "listing_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "country_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "city_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "plate_format_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "city": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Paris"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "format": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Standard Format"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "field_values": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "field_value": {
                                                                "type": "string",
                                                                "example": "ABC123"
                                                            },
                                                            "format_field": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 1
                                                                    },
                                                                    "field_name": {
                                                                        "type": "string",
                                                                        "example": "Number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "License plate not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cities/{cityId}/plate-formats/details": {
            "get": {
                "tags": [
                    "License Plates"
                ],
                "summary": "Get plate formats by city with details",
                "description": "Retrieve all plate formats for a specific city with detailed field information",
                "operationId": "533d0edacc234e51c994ede55bfcc95d",
                "parameters": [
                    {
                        "name": "cityId",
                        "in": "path",
                        "description": "City ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plate formats retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "city": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Paris"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "formats": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Standard Format"
                                                    },
                                                    "country": {
                                                        "type": "string",
                                                        "example": "France"
                                                    },
                                                    "background_color": {
                                                        "type": "string",
                                                        "example": "#FFFFFF"
                                                    },
                                                    "text_color": {
                                                        "type": "string",
                                                        "example": "#000000"
                                                    },
                                                    "width_mm": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 520
                                                    },
                                                    "height_mm": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 110
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Standard French license plate"
                                                    },
                                                    "fields_count": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "fields": {
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer",
                                                                    "example": 1
                                                                },
                                                                "field_name": {
                                                                    "type": "string",
                                                                    "example": "Letters"
                                                                },
                                                                "position": {
                                                                    "type": "string",
                                                                    "example": "left"
                                                                },
                                                                "character_type": {
                                                                    "type": "string",
                                                                    "example": "alphabetic"
                                                                },
                                                                "writing_system": {
                                                                    "type": "string",
                                                                    "example": "latin"
                                                                },
                                                                "min_length": {
                                                                    "type": "integer",
                                                                    "example": 2
                                                                },
                                                                "max_length": {
                                                                    "type": "integer",
                                                                    "example": 3
                                                                },
                                                                "is_required": {
                                                                    "type": "boolean",
                                                                    "example": true
                                                                },
                                                                "validation_pattern": {
                                                                    "type": "string",
                                                                    "example": "^[A-Z]{2,3}$"
                                                                },
                                                                "font_size": {
                                                                    "type": "integer",
                                                                    "example": 12
                                                                },
                                                                "is_bold": {
                                                                    "type": "boolean",
                                                                    "example": true
                                                                },
                                                                "display_order": {
                                                                    "type": "integer",
                                                                    "example": 1
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/motorcycle": {
            "post": {
                "tags": [
                    "Listings"
                ],
                "summary": "Créer ou mettre à jour une annonce de moto (multi-étapes)",
                "operationId": "82e466deecdfc7f046318f30b8399c74",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "step": {
                                        "description": "Étape actuelle (1, 2 ou 3)",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "listing_id": {
                                        "description": "Obligatoire à partir de l'étape 2",
                                        "type": "integer",
                                        "example": 42
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Yamaha MT-07"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Moto bien entretenue"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 5000
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "auction_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "minimum_bid": {
                                        "type": "number",
                                        "example": 4000
                                    },
                                    "allow_submission": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "listing_type_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "contacting_channel": {
                                        "type": "string",
                                        "example": "phone"
                                    },
                                    "seller_type": {
                                        "type": "string",
                                        "example": "owner"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "brand_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "model_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "year_id": {
                                        "type": "integer",
                                        "example": 2020
                                    },
                                    "engine": {
                                        "type": "string",
                                        "example": "700cc"
                                    },
                                    "mileage": {
                                        "type": "integer",
                                        "example": 15000
                                    },
                                    "body_condition": {
                                        "type": "string",
                                        "example": "Bon état"
                                    },
                                    "modified": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "insurance": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "general_condition": {
                                        "type": "string",
                                        "example": "Excellent"
                                    },
                                    "vehicle_care": {
                                        "type": "string",
                                        "example": "Toujours au garage"
                                    },
                                    "transmission": {
                                        "type": "string",
                                        "example": "Manuelle"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Annonce moto enregistrée ou mise à jour avec succès"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/spare-part": {
            "post": {
                "tags": [
                    "Listings"
                ],
                "summary": "Créer ou mettre à jour une annonce de pièce détachée (multi-étapes)",
                "operationId": "e7bd91a7a7d7d7e0ab2c539cc2348a62",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "step": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "listing_id": {
                                        "type": "integer",
                                        "example": 45
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Pneu arrière"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Pneu en bon état"
                                    },
                                    "price": {
                                        "type": "number",
                                        "example": 200
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "auction_enabled": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "minimum_bid": {
                                        "type": "number",
                                        "example": null
                                    },
                                    "allow_submission": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "listing_type_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "contacting_channel": {
                                        "type": "string",
                                        "example": "email"
                                    },
                                    "seller_type": {
                                        "type": "string",
                                        "example": "dealer"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "condition": {
                                        "type": "string",
                                        "example": "used"
                                    },
                                    "motorcycles": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "brand_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "model_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "year_id": {
                                                    "type": "integer",
                                                    "example": 2020
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Annonce pièce détachée enregistrée ou mise à jour avec succès"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/license-plate": {
            "post": {
                "tags": [
                    "Listings"
                ],
                "summary": "Créer ou mettre à jour une annonce de plaque d'immatriculation (multi-étapes)",
                "operationId": "fd028dfaaee30bf948a3880d3acb1632",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "step": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "listing_id": {
                                        "type": "integer",
                                        "example": 46
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Plaque personnalisée"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Plaque ABC123 rouge"
                                    },
                                    "price": {
                                        "type": "number",
                                        "example": 800
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 8
                                    },
                                    "auction_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "minimum_bid": {
                                        "type": "number",
                                        "example": 500
                                    },
                                    "allow_submission": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "listing_type_id": {
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "contacting_channel": {
                                        "type": "string",
                                        "example": "whatsapp"
                                    },
                                    "seller_type": {
                                        "type": "string",
                                        "example": "owner"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "plate_format_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "country_id_lp": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id_lp": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "fields": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "field_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "example": "ABC123"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Annonce plaque immatriculation enregistrée ou mise à jour avec succès"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/complete/{id}": {
            "put": {
                "tags": [
                    "Listings"
                ],
                "summary": "Compléter un listing existant",
                "operationId": "ea4be4bab28515b856eea32a17064021",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID du listing à compléter",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "step": {
                                        "description": "Étape à compléter",
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "action": {
                                        "description": "Action: 'update' ou 'complete'",
                                        "type": "string",
                                        "example": "complete"
                                    },
                                    "amount": {
                                        "description": "Montant pour step 3",
                                        "type": "number",
                                        "example": 50
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Titre mis à jour"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "price": {
                                        "type": "number"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Listing complété avec succès"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/country/{country_id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get listings by country",
                "operationId": "de654be482468b274c9b346c2eb652e4",
                "parameters": [
                    {
                        "name": "country_id",
                        "in": "path",
                        "description": "Country ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "price": {
                                                "type": "number"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "city": {
                                                "type": "string"
                                            },
                                            "country": {
                                                "type": "string"
                                            },
                                            "images": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "wishlist": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/by-category/{category_id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get listings by category with flexible filtering",
                "operationId": "8e72591327b6671d611c12f535bc1c22",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "path",
                        "description": "Category ID (1=Motorcycle, 2=SparePart, 3=LicensePlate)",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Filter by country ID (e.g., 1) or country name (e.g., 'Morocco')",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Morocco"
                    },
                    {
                        "name": "cities[]",
                        "in": "query",
                        "description": "Filter by multiple cities (IDs or names). Can be repeated: ?cities[]=Casablanca&cities[]=Rabat&cities[]=5",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "plate_search",
                        "in": "query",
                        "description": "Search in license plate field values (only for category_id=3)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "123"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination (default: returns all results if not provided)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "example": 1
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page (default: 15, max: 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Showing listings for 'Morocco' in cities: Casablanca, Rabat, Marrakech."
                                        },
                                        "searched_country": {
                                            "type": "string",
                                            "example": "Morocco",
                                            "nullable": true
                                        },
                                        "searched_cities": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "Casablanca",
                                                "Rabat",
                                                "Marrakech"
                                            ]
                                        },
                                        "showing_all_countries": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "total_listings": {
                                            "type": "integer",
                                            "example": 42
                                        },
                                        "current_page": {
                                            "description": "Current page number (only present when pagination is used)",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "per_page": {
                                            "description": "Items per page (only present when pagination is used)",
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "last_page": {
                                            "description": "Total number of pages (only present when pagination is used)",
                                            "type": "integer",
                                            "example": 3
                                        },
                                        "from": {
                                            "description": "Starting item number (only present when pagination is used)",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "to": {
                                            "description": "Ending item number (only present when pagination is used)",
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "listings": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 123
                                                    },
                                                    "title": {
                                                        "type": "string",
                                                        "example": "Honda CBR 600RR"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Excellent condition, low mileage"
                                                    },
                                                    "price": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 85000
                                                    },
                                                    "category_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "auction_enabled": {
                                                        "type": "boolean",
                                                        "example": false
                                                    },
                                                    "minimum_bid": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": null,
                                                        "nullable": true
                                                    },
                                                    "allow_submission": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "listing_type_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "contacting_channel": {
                                                        "type": "string",
                                                        "example": "whatsapp"
                                                    },
                                                    "seller_type": {
                                                        "type": "string",
                                                        "example": "individual"
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "example": "published"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2025-01-15 10:30:00"
                                                    },
                                                    "city": {
                                                        "type": "string",
                                                        "example": "Casablanca"
                                                    },
                                                    "country": {
                                                        "type": "string",
                                                        "example": "Morocco"
                                                    },
                                                    "images": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string",
                                                            "example": "https://example.com/image.jpg"
                                                        }
                                                    },
                                                    "wishlist": {
                                                        "type": "boolean",
                                                        "example": false
                                                    },
                                                    "display_price": {
                                                        "description": "Price to display (fixed price or current bid)",
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 85000
                                                    },
                                                    "is_auction": {
                                                        "description": "Whether this is an auction listing",
                                                        "type": "boolean",
                                                        "example": false
                                                    },
                                                    "current_bid": {
                                                        "description": "Current highest bid for auctions",
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": null,
                                                        "nullable": true
                                                    },
                                                    "currency": {
                                                        "description": "Currency symbol",
                                                        "type": "string",
                                                        "example": "MAD"
                                                    },
                                                    "motorcycle": {
                                                        "description": "Only present for category_id=1",
                                                        "properties": {
                                                            "brand": {
                                                                "type": "string",
                                                                "example": "Honda"
                                                            },
                                                            "model": {
                                                                "type": "string",
                                                                "example": "CBR 600RR"
                                                            },
                                                            "year": {
                                                                "type": "integer",
                                                                "example": 2020
                                                            },
                                                            "type": {
                                                                "type": "string",
                                                                "example": "Sport"
                                                            },
                                                            "engine": {
                                                                "type": "string",
                                                                "example": "600cc"
                                                            },
                                                            "mileage": {
                                                                "type": "integer",
                                                                "example": 15000
                                                            },
                                                            "body_condition": {
                                                                "type": "string",
                                                                "example": "excellent"
                                                            },
                                                            "modified": {
                                                                "type": "boolean",
                                                                "example": false
                                                            },
                                                            "insurance": {
                                                                "type": "string",
                                                                "example": "full"
                                                            },
                                                            "general_condition": {
                                                                "type": "string",
                                                                "example": "excellent"
                                                            },
                                                            "vehicle_care": {
                                                                "type": "string",
                                                                "example": "well_maintained"
                                                            },
                                                            "transmission": {
                                                                "type": "string",
                                                                "example": "manual"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "spare_part": {
                                                        "description": "Only present for category_id=2",
                                                        "properties": {
                                                            "condition": {
                                                                "type": "string",
                                                                "example": "new"
                                                            },
                                                            "brand": {
                                                                "type": "string",
                                                                "example": "Akrapovic"
                                                            },
                                                            "category": {
                                                                "type": "string",
                                                                "example": "Exhaust"
                                                            },
                                                            "compatible_motorcycles": {
                                                                "type": "array",
                                                                "items": {
                                                                    "properties": {
                                                                        "brand": {
                                                                            "type": "string",
                                                                            "example": "Honda"
                                                                        },
                                                                        "model": {
                                                                            "type": "string",
                                                                            "example": "CBR 600RR"
                                                                        },
                                                                        "year": {
                                                                            "type": "integer",
                                                                            "example": 2020
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "license_plate": {
                                                        "description": "Only present for category_id=3",
                                                        "properties": {
                                                            "plate_format": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 1
                                                                    },
                                                                    "name": {
                                                                        "type": "string",
                                                                        "example": "Standard Format"
                                                                    },
                                                                    "pattern": {
                                                                        "type": "string",
                                                                        "example": "XX-1234-YY"
                                                                    },
                                                                    "country": {
                                                                        "type": "string",
                                                                        "example": "Morocco"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "city": {
                                                                "type": "string",
                                                                "example": "Casablanca"
                                                            },
                                                            "country": {
                                                                "type": "string",
                                                                "example": "Morocco"
                                                            },
                                                            "country_id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "fields": {
                                                                "type": "array",
                                                                "items": {
                                                                    "properties": {
                                                                        "field_id": {
                                                                            "type": "integer",
                                                                            "example": 1
                                                                        },
                                                                        "field_name": {
                                                                            "type": "string",
                                                                            "example": "plate_number"
                                                                        },
                                                                        "field_position": {
                                                                            "type": "integer",
                                                                            "example": 1
                                                                        },
                                                                        "field_type": {
                                                                            "type": "string",
                                                                            "example": "text"
                                                                        },
                                                                        "field_label": {
                                                                            "type": "string",
                                                                            "example": "Plate Number"
                                                                        },
                                                                        "is_required": {
                                                                            "type": "boolean",
                                                                            "example": true
                                                                        },
                                                                        "max_length": {
                                                                            "type": "integer",
                                                                            "example": 10
                                                                        },
                                                                        "validation_pattern": {
                                                                            "type": "string",
                                                                            "example": "^[A-Z0-9]+$",
                                                                            "nullable": true
                                                                        },
                                                                        "value": {
                                                                            "type": "string",
                                                                            "example": "AB-1234-CD"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/my-ads": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get authenticated user's listings (My Ads)",
                "operationId": "80891a8944393bc636f2e427ec1fc9d4",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Filter by category ID (1=Motorcycle, 2=SparePart, 3=LicensePlate)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status (published, draft, sold, expired)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "published",
                                "draft",
                                "sold",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "example": 1
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page (default: 15, max: 100)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1
                        },
                        "example": 15
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's listings retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Your listings retrieved successfully"
                                        },
                                        "total_listings": {
                                            "type": "integer",
                                            "example": 25
                                        },
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "last_page": {
                                            "type": "integer",
                                            "example": 2
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "listings": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 123
                                                    },
                                                    "title": {
                                                        "type": "string",
                                                        "example": "Honda CBR 600RR"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Excellent condition"
                                                    },
                                                    "price": {
                                                        "type": "number",
                                                        "example": 85000
                                                    },
                                                    "category_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "example": "published"
                                                    },
                                                    "auction_enabled": {
                                                        "type": "boolean",
                                                        "example": false
                                                    },
                                                    "views_count": {
                                                        "type": "integer",
                                                        "example": 150
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "city": {
                                                        "type": "string",
                                                        "example": "Casablanca"
                                                    },
                                                    "country": {
                                                        "type": "string",
                                                        "example": "Morocco"
                                                    },
                                                    "images": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "display_price": {
                                                        "type": "number",
                                                        "example": 85000
                                                    },
                                                    "is_auction": {
                                                        "type": "boolean",
                                                        "example": false
                                                    },
                                                    "current_bid": {
                                                        "type": "number",
                                                        "example": null,
                                                        "nullable": true
                                                    },
                                                    "currency": {
                                                        "type": "string",
                                                        "example": "MAD"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/city/{city_id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get listings by city",
                "operationId": "43b58e1b7294348aaca05f3293481cd0",
                "parameters": [
                    {
                        "name": "city_id",
                        "in": "path",
                        "description": "City ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "price": {
                                                "type": "number"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "city": {
                                                "type": "string"
                                            },
                                            "country": {
                                                "type": "string"
                                            },
                                            "images": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "wishlist": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/filter": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Filter listings",
                "operationId": "47ab8489cc4860d88d2cf929c47b4f47",
                "parameters": [
                    {
                        "name": "city_id",
                        "in": "query",
                        "description": "City ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Country ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Category ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Filtered listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "price": {
                                                "type": "number"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "city": {
                                                "type": "string"
                                            },
                                            "country": {
                                                "type": "string"
                                            },
                                            "images": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "wishlist": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/latest/{city_id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get latest listings by city",
                "operationId": "0d472ecc656be8404204a3975a20ffac",
                "parameters": [
                    {
                        "name": "city_id",
                        "in": "path",
                        "description": "City ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest 10 listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "price": {
                                                "type": "number"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "city": {
                                                "type": "string"
                                            },
                                            "country": {
                                                "type": "string"
                                            },
                                            "images": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "wishlist": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/{id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get listing by ID",
                "operationId": "b905f326db31dcc60e5f3cc2a1ad05d2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Listing ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Listing details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "title": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "price": {
                                            "type": "number"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "city": {
                                            "type": "string"
                                        },
                                        "country": {
                                            "type": "string"
                                        },
                                        "images": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "wishlist": {
                                            "type": "boolean"
                                        },
                                        "is_seller": {
                                            "description": "True if authenticated user is the seller",
                                            "type": "boolean"
                                        },
                                        "category_id": {
                                            "type": "integer"
                                        },
                                        "submission": {
                                            "type": "object",
                                            "nullable": true
                                        },
                                        "seller": {
                                            "type": "object",
                                            "nullable": true
                                        },
                                        "motorcycle": {
                                            "type": "object",
                                            "nullable": true
                                        },
                                        "spare_part": {
                                            "type": "object",
                                            "nullable": true
                                        },
                                        "license_plate": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found"
                    }
                }
            }
        },
        "/api/listings": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get all listings with pagination",
                "operationId": "8f9a3e0af2ef4de078f651d773cbefbb",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer"
                                        },
                                        "last_page": {
                                            "type": "integer"
                                        },
                                        "total": {
                                            "type": "integer"
                                        },
                                        "per_page": {
                                            "type": "integer"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    },
                                                    "price": {
                                                        "type": "number"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "city": {
                                                        "type": "string"
                                                    },
                                                    "country": {
                                                        "type": "string"
                                                    },
                                                    "images": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "wishlist": {
                                                        "type": "boolean"
                                                    },
                                                    "category_id": {
                                                        "type": "integer"
                                                    },
                                                    "motorcycle": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "license_plate": {
                                                        "type": "object",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/my-listing": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Récupérer les annonces de l'utilisateur connecté avec les détails selon la catégorie",
                "operationId": "c45df03a980317ef861e77628c045275",
                "responses": {
                    "200": {
                        "description": "Liste des annonces de l'utilisateur",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/pricing": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get price by model ID",
                "operationId": "e446d6e3b1cbe8818ae9407bb62572dd",
                "parameters": [
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "Model ID",
                        "required": true
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Category ID",
                        "required": true
                    },
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Country ID",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Price details"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/brands/listings-count": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get motorcycle brands with listing count",
                "operationId": "9419470fe1e851c9dec9829e9203b752",
                "responses": {
                    "200": {
                        "description": "List of motorcycle brands with their listing counts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "listings_count": {
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/brands/{brandId}/models-with-listings": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get motorcycle models with listings for a specific brand",
                "operationId": "a66327b95c64e3aca63310abfddf49ec",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Brand ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of motorcycle models with their listing counts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "models": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "listings_count": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Brand not found"
                    }
                }
            }
        },
        "/api/brands/{brandId}/models/{modelId}/years-with-listings": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get motorcycle years with listings for a specific brand and model",
                "operationId": "8fd353f2b653f1039e68240b9d6619f6",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Brand ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "Model ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of years with their listing counts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "years": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "year_id": {
                                                        "type": "integer"
                                                    },
                                                    "year": {
                                                        "type": "integer"
                                                    },
                                                    "listings_count": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Brand or Model not found"
                    }
                }
            }
        },
        "/api/categorie/listings-count": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get motorcycle categorie with listing count",
                "operationId": "ed6fc946f901deb51b21d44a9fa2b0fd",
                "responses": {
                    "200": {
                        "description": "List of motorcycle categorie with their listing counts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "motorcycle_types": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "listings_count": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/types": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get all motorcycle types",
                "operationId": "91ec443bd674f98c9caec796eaef5576",
                "responses": {
                    "200": {
                        "description": "List of all motorcycle types",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "motorcycle_types": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories/{categoryId}/price-range": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get price range for a specific category",
                "description": "Retrieve minimum and maximum prices for listings in a specific category",
                "operationId": "9d0c2313a78a00f1e15527063f450cce",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Category ID (1=Motorcycle, 2=SparePart, 3=LicensePlate)",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                1,
                                2,
                                3
                            ],
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Price range retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Price range retrieved successfully"
                                        },
                                        "category_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "min_price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 5000
                                        },
                                        "max_price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 25000
                                        },
                                        "total_listings": {
                                            "type": "integer",
                                            "example": 45
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid category ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid category_id. Only categories 1, 2, or 3 are allowed."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to retrieve price range"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Database connection failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/draft": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get draft listings for the authenticated seller",
                "description": "swagger get",
                "operationId": "96012e13fb8f72de171f17d294daf220",
                "responses": {
                    "200": {
                        "description": "Draft listings fetched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listings fetched successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    },
                                                    "price": {
                                                        "type": "number"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "city": {
                                                        "type": "string"
                                                    },
                                                    "country": {
                                                        "type": "string"
                                                    },
                                                    "images": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "category_id": {
                                                        "type": "integer"
                                                    },
                                                    "motorcycle": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "sparePart": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "licensePlate": {
                                                        "type": "object",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to fetch draft listings"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Database connection failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/draft/{id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get a specific draft listing by ID for the authenticated seller",
                "description": "Summary of getDraftListingById\nswagger get",
                "operationId": "fe00ae5367b2d31c80c702734db1b072",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the draft listing",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Draft listing fetched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listing fetched successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 123
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "My Listing Title"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Description of the listing"
                                                },
                                                "price": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1999.99
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2025-07-08T15:30:00Z"
                                                },
                                                "city": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Casablanca"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "nullable": true
                                                },
                                                "country": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Morocco"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "nullable": true
                                                },
                                                "images": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 10
                                                            },
                                                            "image_url": {
                                                                "type": "string",
                                                                "example": "https://example.com/image.jpg"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "category_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "motorcycle": {
                                                    "type": "object",
                                                    "nullable": true
                                                },
                                                "sparePart": {
                                                    "type": "object",
                                                    "nullable": true
                                                },
                                                "licensePlate": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Draft listing not found or access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listing not found or access denied"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Listings"
                ],
                "summary": "Delete a single draft listing by ID",
                "operationId": "aee3d907166fde42e5f542a24089da94",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the draft listing to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Draft listing deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listing deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found or not a draft",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listing not found or unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to delete listing"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Database error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/recent": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get last 10 listings (all categories)",
                "operationId": "10f1b5962dc1fe361541cbef51d839f6",
                "parameters": [
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Filter by country name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recent listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "searched_country": {
                                            "type": "string"
                                        },
                                        "showing_all_countries": {
                                            "type": "boolean"
                                        },
                                        "total_listings": {
                                            "type": "integer"
                                        },
                                        "listings": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    },
                                                    "price": {
                                                        "type": "number"
                                                    },
                                                    "category_id": {
                                                        "type": "integer"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "city": {
                                                        "type": "string"
                                                    },
                                                    "country": {
                                                        "type": "string"
                                                    },
                                                    "images": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "motorcycle": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "spare_part": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "license_plate": {
                                                        "type": "object",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/locations": {
            "get": {
                "tags": [
                    "locations"
                ],
                "summary": "display all countries and cities",
                "description": "Get all countries and cities",
                "operationId": "getLocations",
                "parameters": [
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "ID of the country to filter cities",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "city_id",
                        "in": "query",
                        "description": "ID of the city to filter countries",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "countries": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "code": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "cities": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "country_id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Resource not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Internal Server Error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "servers": [
                    {
                        "url": "http://localhost:8000",
                        "description": "Local server"
                    },
                    {
                        "url": "https://api.example.com",
                        "description": "Production server"
                    },
                    {
                        "url": "https://staging.api.example.com",
                        "description": "Staging server"
                    },
                    {
                        "url": "https://dev.api.example.com",
                        "description": "Development server"
                    }
                ]
            }
        },
        "/api/countries": {
            "post": {
                "tags": [
                    "locations"
                ],
                "summary": "Create a new country",
                "description": "Store a new country",
                "operationId": "storeCountry",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "France"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "FR"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Country created successfully"
                    }
                }
            }
        },
        "/api/countries/{id}": {
            "put": {
                "tags": [
                    "locations"
                ],
                "summary": "Update a country",
                "description": "Update a country by ID",
                "operationId": "updateCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the country to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "France"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "FR"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Country updated successfully"
                    }
                }
            },
            "delete": {
                "tags": [
                    "locations"
                ],
                "summary": "Delete a country",
                "description": "Delete a country by ID",
                "operationId": "destroyCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the country to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Country deleted successfully"
                    }
                }
            }
        },
        "/api/cities": {
            "post": {
                "tags": [
                    "locations"
                ],
                "summary": "Create a new city",
                "description": "Store a new city",
                "operationId": "storeCity",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "country_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Paris"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "City created successfully"
                    }
                }
            }
        },
        "/api/cities/{id}": {
            "put": {
                "tags": [
                    "locations"
                ],
                "summary": "Update a city",
                "description": "Update a city by ID",
                "operationId": "updateCity",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the city to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "country_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Lyon"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "City updated successfully"
                    }
                }
            },
            "delete": {
                "tags": [
                    "locations"
                ],
                "summary": "Delete a city",
                "description": "Delete a city by ID",
                "operationId": "destroyCity",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the city to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "City deleted successfully"
                    }
                }
            }
        },
        "/api/motorcycle-brands": {
            "get": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Get all motorcycle brands",
                "operationId": "ecf4810f772f5ef0f46e563ff8ea5a3d",
                "responses": {
                    "200": {
                        "description": "List of motorcycle brands"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Create a new motorcycle brand",
                "operationId": "ca62f9a53aae429317a0d555db0db234",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Honda"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle brand created"
                    }
                }
            }
        },
        "/api/motorcycle-brands/{id}": {
            "get": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Get a motorcycle brand by ID",
                "operationId": "4353d4620781aea0f89414d16ba72e0f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle brand data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Update a motorcycle brand",
                "operationId": "07d7155dc636ccf7569dd392a5d4e404",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Yamaha"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle brand updated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Delete a motorcycle brand",
                "operationId": "bb9a49f49175528d85d778649c2fc2f5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle brand deleted successfully"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/comparison/motorcycles/types": {
            "get": {
                "tags": [
                    "Motorcycles Comparison"
                ],
                "summary": "Get all motorcycle types",
                "description": "Returns the list of all available motorcycle types",
                "operationId": "2b32c39f295bfe4130fa582f8aa88d12",
                "responses": {
                    "200": {
                        "description": "Types list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Sport"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Sport motorcycles"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/comparison/motorcycles/brands": {
            "get": {
                "tags": [
                    "Motorcycles Comparison"
                ],
                "summary": "Get all brands",
                "description": "Returns the list of all motorcycle brands",
                "operationId": "06770141aaec130f38eff5cd15a3b177",
                "responses": {
                    "200": {
                        "description": "Brands list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Yamaha"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/comparison/motorcycles/models": {
            "get": {
                "tags": [
                    "Motorcycles Comparison"
                ],
                "summary": "Get all models",
                "description": "Returns the list of all models, filtered by brand and/or type",
                "operationId": "3875c03c19b573f1545cfeaa72667236",
                "parameters": [
                    {
                        "name": "brand_id",
                        "in": "query",
                        "description": "Brand ID to filter models",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "type_id",
                        "in": "query",
                        "description": "Type ID to filter models",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Models list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "brand_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "YZF-R1"
                                                    },
                                                    "type_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "brand": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Yamaha"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Sport"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/comparison/motorcycles/years": {
            "get": {
                "tags": [
                    "Motorcycles Comparison"
                ],
                "summary": "Get all years for a model",
                "description": "Returns the list of all available years for a specific model",
                "operationId": "c47f77add17ae4e4c23aa34c63b7c7ba",
                "parameters": [
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "Model ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Years list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "model_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "year": {
                                                        "type": "integer",
                                                        "example": 2023
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/comparison/motorcycles/details/{yearId}": {
            "get": {
                "tags": [
                    "Motorcycles Comparison"
                ],
                "summary": "Get complete motorcycle details",
                "description": "Returns all detailed information about a specific motorcycle",
                "operationId": "27391880a3c123cdb002fdb99a4d9ea9",
                "parameters": [
                    {
                        "name": "yearId",
                        "in": "path",
                        "description": "Motorcycle year ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "info": {
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "example": "Sport"
                                                        },
                                                        "brand": {
                                                            "type": "string",
                                                            "example": "Yamaha"
                                                        },
                                                        "model": {
                                                            "type": "string",
                                                            "example": "YZF-R1"
                                                        },
                                                        "year": {
                                                            "type": "integer",
                                                            "example": 2023
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "details": {
                                                    "properties": {
                                                        "displacement": {
                                                            "type": "string",
                                                            "example": "998cc"
                                                        },
                                                        "engine_type": {
                                                            "type": "string",
                                                            "example": "4-cylinder"
                                                        },
                                                        "power": {
                                                            "type": "string",
                                                            "example": "200hp"
                                                        },
                                                        "torque": {
                                                            "type": "string",
                                                            "example": "112.4Nm"
                                                        },
                                                        "top_speed": {
                                                            "type": "string",
                                                            "example": "299 km/h"
                                                        },
                                                        "dry_weight": {
                                                            "type": "string",
                                                            "example": "199kg"
                                                        },
                                                        "price": {
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 17999.99
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Motorcycle not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Motorcycle details not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/comparison/motorcycles/compare": {
            "post": {
                "tags": [
                    "Motorcycles Comparison"
                ],
                "summary": "Compare two motorcycles",
                "description": "Compares the complete details of two motorcycles side by side",
                "operationId": "a7e5636a7d91ddb39505542635e3e0b8",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "year_id_1",
                                    "year_id_2"
                                ],
                                "properties": {
                                    "year_id_1": {
                                        "description": "Year ID of the first motorcycle",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "year_id_2": {
                                        "description": "Year ID of the second motorcycle",
                                        "type": "integer",
                                        "example": 2
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comparison performed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "motorcycle_1": {
                                                    "properties": {
                                                        "info": {
                                                            "properties": {
                                                                "type": {
                                                                    "type": "string",
                                                                    "example": "Sport"
                                                                },
                                                                "brand": {
                                                                    "type": "string",
                                                                    "example": "Yamaha"
                                                                },
                                                                "model": {
                                                                    "type": "string",
                                                                    "example": "YZF-R1"
                                                                },
                                                                "year": {
                                                                    "type": "integer",
                                                                    "example": 2023
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "details": {
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "motorcycle_2": {
                                                    "properties": {
                                                        "info": {
                                                            "properties": {
                                                                "type": {
                                                                    "type": "string",
                                                                    "example": "Sport"
                                                                },
                                                                "brand": {
                                                                    "type": "string",
                                                                    "example": "Honda"
                                                                },
                                                                "model": {
                                                                    "type": "string",
                                                                    "example": "CBR1000RR"
                                                                },
                                                                "year": {
                                                                    "type": "integer",
                                                                    "example": 2023
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "details": {
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "One or more motorcycles not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "One or more motorcycles not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/motorcycles": {
            "get": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Get all motorcycles",
                "operationId": "c0f4e4f3a808887d946e4cc85a622b96",
                "responses": {
                    "200": {
                        "description": "List of motorcycles"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Create a new motorcycle",
                "operationId": "94a6589d128340e0e630959bfce11074",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "brand_id",
                                    "model_id",
                                    "year_id",
                                    "color"
                                ],
                                "properties": {
                                    "brand_id": {
                                        "type": "integer"
                                    },
                                    "model_id": {
                                        "type": "integer"
                                    },
                                    "year_id": {
                                        "type": "integer"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "Red"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle created"
                    }
                }
            }
        },
        "/api/motorcycles/{id}": {
            "get": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Get a motorcycle by ID",
                "operationId": "edbfbe97c12800775c8e6f5479e9fbff",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Update a motorcycle",
                "operationId": "51d631f35a9d36781f427b8dee84618e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "brand_id",
                                    "model_id",
                                    "year_id",
                                    "color"
                                ],
                                "properties": {
                                    "brand_id": {
                                        "type": "integer"
                                    },
                                    "model_id": {
                                        "type": "integer"
                                    },
                                    "year_id": {
                                        "type": "integer"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "Black"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle updated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Delete a motorcycle",
                "operationId": "380bb8e8e4e201f4304b027a4c56adcc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/motorcycle/brands": {
            "get": {
                "tags": [
                    "Motorcycle"
                ],
                "summary": "Get all active motorcycle brands",
                "operationId": "3af91f5a44ae6c943fdd8df3e034f861",
                "responses": {
                    "200": {
                        "description": "List of active brands",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Honda"
                                                    },
                                                    "is_displayed": {
                                                        "type": "boolean",
                                                        "example": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/motorcycle/brands/all": {
            "get": {
                "tags": [
                    "Motorcycle"
                ],
                "summary": "Get all motorcycle brands (including hidden)",
                "operationId": "f42c2c1b1c4bef05698fad6f4f79a00e",
                "responses": {
                    "200": {
                        "description": "List of all brands",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Honda"
                                                    },
                                                    "is_displayed": {
                                                        "type": "boolean",
                                                        "example": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/motorcycle/models/{brandId}": {
            "get": {
                "tags": [
                    "Motorcycle"
                ],
                "summary": "Get models by brand ID",
                "operationId": "3d618db6438f249f8e1bf6305db56719",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Brand ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of models for the brand",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "CBR500R"
                                                    },
                                                    "brand_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/motorcycle/years/{modelId}": {
            "get": {
                "tags": [
                    "Motorcycle"
                ],
                "summary": "Get years by model ID",
                "operationId": "c4ca5b993dec6ba6a7d552e4d80d831f",
                "parameters": [
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "Model ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 2
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of years for the model",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "year": {
                                                        "type": "integer",
                                                        "example": 2022
                                                    },
                                                    "model_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/motorcycle/details/{yearId}": {
            "get": {
                "tags": [
                    "Motorcycle"
                ],
                "summary": "Get complete details by year ID",
                "operationId": "f87c963e7d5a91f61e3d648802309668",
                "parameters": [
                    {
                        "name": "yearId",
                        "in": "path",
                        "description": "Year ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 3
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complete motorcycle details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "year_id": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "year": {
                                                    "type": "integer",
                                                    "example": 2022
                                                },
                                                "model_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "model_name": {
                                                    "type": "string",
                                                    "example": "CBR500R"
                                                },
                                                "brand_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "brand_name": {
                                                    "type": "string",
                                                    "example": "Honda"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/motorcycle-models": {
            "get": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Get all motorcycle models",
                "operationId": "9cf26095369c0a1f24ccdc59eb5e8e8f",
                "responses": {
                    "200": {
                        "description": "List of motorcycle models"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Create a new motorcycle model",
                "operationId": "348e2a1f71de4990c263a894b77438d4",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "brand_id",
                                    "name",
                                    "type_id"
                                ],
                                "properties": {
                                    "brand_id": {
                                        "type": "integer"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "CBR600RR"
                                    },
                                    "type_id": {
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle model created"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/motorcycle-models/{id}": {
            "get": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Get a motorcycle model by ID",
                "operationId": "46db16be3a19f6d3906d8c279c984480",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle model data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Update a motorcycle model",
                "operationId": "b8d3d0d6c6d3dafb99f779cc7ee53fd7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "brand_id",
                                    "name",
                                    "type_id"
                                ],
                                "properties": {
                                    "brand_id": {
                                        "type": "integer"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "MT-07"
                                    },
                                    "type_id": {
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle model updated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Delete a motorcycle model",
                "operationId": "66a3f0979775886a398e833255b2b2e3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/motorcycle-types": {
            "get": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Get all motorcycle types",
                "operationId": "297a51041d61f5f3f541a47f0193a7cc",
                "responses": {
                    "200": {
                        "description": "List of motorcycle types or no data"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Create a new motorcycle type",
                "operationId": "7ad0d99989baeb77ed42f540f0f9180d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sport"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle type created successfully"
                    }
                }
            }
        },
        "/api/motorcycle-types/{id}": {
            "get": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Get a motorcycle type by ID",
                "operationId": "b0d8d440778b00f40145cac0d48582cf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle type data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Update a motorcycle type",
                "operationId": "5271c1e7521208c1d4922ca3050335d5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Cruiser"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle type updated successfully"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Delete a motorcycle type",
                "operationId": "f7228e3cb76ec733860fd962dd073913",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle type deleted successfully"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/motorcycle-years": {
            "get": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Get all motorcycle years",
                "operationId": "341e8e6f23ee659e345ec02d77ffb7e9",
                "responses": {
                    "200": {
                        "description": "List of motorcycle years"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Create a new motorcycle year",
                "operationId": "7a8fb72eb322da9dd6050001bae9202c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "year"
                                ],
                                "properties": {
                                    "year": {
                                        "type": "integer",
                                        "example": 2024
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle year created"
                    }
                }
            }
        },
        "/api/motorcycle-years/{id}": {
            "get": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Get a motorcycle year by ID",
                "operationId": "9c6d31e9a81d04ae7368a2383d43aaf8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle year data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Update a motorcycle year",
                "operationId": "66699870e0fd7df9d075334cf3f5b8d1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "year"
                                ],
                                "properties": {
                                    "year": {
                                        "type": "integer",
                                        "example": 2025
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle year updated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Delete a motorcycle year",
                "operationId": "5568e4b4440ea6a005c2cce8c74bfdce",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/my-garage": {
            "get": {
                "tags": [
                    "My Garage"
                ],
                "summary": "Get all motorcycles in the authenticated user's garage",
                "operationId": "6240572814fc6aec5c0dd0d440af314d",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page (default is 10, max is 50)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "maximum": 50,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of garage items",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Garage items retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "user_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "brand_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "model_id": {
                                                        "type": "integer",
                                                        "example": 5
                                                    },
                                                    "year_id": {
                                                        "type": "integer",
                                                        "example": 10
                                                    },
                                                    "title": {
                                                        "type": "string",
                                                        "example": "My First Bike",
                                                        "nullable": true
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "This is my favorite motorcycle.",
                                                        "nullable": true
                                                    },
                                                    "picture": {
                                                        "type": "string",
                                                        "example": "http://example.com/image.jpg",
                                                        "nullable": true
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-01-01T12:00:00Z"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-01-02T12:00:00Z"
                                                    },
                                                    "brand": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 2
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Yamaha"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "model": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 5
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "YZF-R3"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "year": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 10
                                                            },
                                                            "year": {
                                                                "type": "integer",
                                                                "example": 2020
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 10
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to retrieve garage items"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Error message details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "My Garage"
                ],
                "summary": "Add a motorcycle to user's garage",
                "operationId": "032bb1f282b7f71aea6c0edd49616c91",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "brand_id",
                                    "model_id",
                                    "year_id"
                                ],
                                "properties": {
                                    "brand_id": {
                                        "description": "Motorcycle brand ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "model_id": {
                                        "description": "Motorcycle model ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "year_id": {
                                        "description": "Motorcycle year ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "title": {
                                        "description": "Optional custom title for the motorcycle",
                                        "type": "string",
                                        "example": "My Daily Beast",
                                        "nullable": true
                                    },
                                    "description": {
                                        "description": "Optional description",
                                        "type": "string",
                                        "example": "Perfect bike for daily commuting",
                                        "nullable": true
                                    },
                                    "picture": {
                                        "description": "Optional picture URL",
                                        "type": "string",
                                        "example": "https://example.com/bike.jpg",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle added to garage successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Motorcycle added to garage successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "My Daily Beast",
                                                    "nullable": true
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Perfect bike for daily commuting",
                                                    "nullable": true
                                                },
                                                "picture": {
                                                    "type": "string",
                                                    "example": "https://example.com/bike.jpg",
                                                    "nullable": true
                                                },
                                                "brand": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Honda"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "model": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "CBR600RR"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "year": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "year": {
                                                            "type": "integer",
                                                            "example": 2020
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Validation failed"
                                        },
                                        "details": {
                                            "properties": {
                                                "brand_id": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The brand id field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to add motorcycle to garage"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Error message details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-garage/{id}": {
            "get": {
                "tags": [
                    "My Garage"
                ],
                "summary": "Get a specific garage item",
                "operationId": "c0c26eb8ec2370efdf355f96209f793a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Garage item ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Garage item retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Garage item retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "My Daily Beast",
                                                    "nullable": true
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Perfect bike for daily commuting",
                                                    "nullable": true
                                                },
                                                "picture": {
                                                    "type": "string",
                                                    "example": "https://example.com/bike.jpg",
                                                    "nullable": true
                                                },
                                                "brand": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Honda"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "model": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "CBR600RR"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "year": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "year": {
                                                            "type": "integer",
                                                            "example": 2020
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Garage item not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Not found"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Garage item not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to retrieve garage item"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Error message details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "My Garage"
                ],
                "summary": "Update a garage item",
                "operationId": "554e65487e55220ecfd85c0cc362bff6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Garage item ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "description": "Updated title",
                                        "type": "string",
                                        "example": "Updated Beast Machine",
                                        "nullable": true
                                    },
                                    "description": {
                                        "description": "Updated description",
                                        "type": "string",
                                        "example": "Updated description with modifications",
                                        "nullable": true
                                    },
                                    "picture": {
                                        "description": "Updated picture URL",
                                        "type": "string",
                                        "example": "https://example.com/updated-bike.jpg",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Garage item updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Garage item updated successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "Updated Beast Machine",
                                                    "nullable": true
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Updated description",
                                                    "nullable": true
                                                },
                                                "picture": {
                                                    "type": "string",
                                                    "example": "https://example.com/updated-bike.jpg",
                                                    "nullable": true
                                                },
                                                "brand": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Honda"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Garage item not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Not found"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Garage item not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Validation failed"
                                        },
                                        "details": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to update garage item"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Error message details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "My Garage"
                ],
                "summary": "Delete a garage item",
                "operationId": "f3d09d633ed040ebe16580fae8034abf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Garage item ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle removed from garage successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Motorcycle removed from garage successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Garage item not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Not found"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Garage item not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to delete garage item"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Error message details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/motorcycle-data": {
            "get": {
                "tags": [
                    "My Garage"
                ],
                "summary": "Get motorcycle data for dropdowns (brands, models, years)",
                "operationId": "05f9222a14a3ce496364a6bc09469102",
                "responses": {
                    "200": {
                        "description": "Motorcycle data retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Motorcycle data retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "brands": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Honda"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "models": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "brand_id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "CBR600RR"
                                                            },
                                                            "brand_name": {
                                                                "type": "string",
                                                                "example": "Honda"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "years": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "model_id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "year": {
                                                                "type": "integer",
                                                                "example": 2020
                                                            },
                                                            "model_name": {
                                                                "type": "string",
                                                                "example": "CBR600RR"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to retrieve motorcycle data"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Error message details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-garage/default": {
            "get": {
                "tags": [
                    "My Garage"
                ],
                "summary": "Get user's default motorcycle",
                "description": "Returns the motorcycle marked as default in the user's garage. If no default is set, returns null.",
                "operationId": "a6b94f977a0526a8c7635ea3729f620f",
                "responses": {
                    "200": {
                        "description": "Default motorcycle retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Default motorcycle retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "user_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "brand_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "model_id": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "year_id": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "My Daily Beast",
                                                    "nullable": true
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Perfect bike for daily commuting",
                                                    "nullable": true
                                                },
                                                "picture": {
                                                    "type": "string",
                                                    "example": "https://example.com/bike.jpg",
                                                    "nullable": true
                                                },
                                                "is_default": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2024-01-01T12:00:00Z"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2024-01-02T12:00:00Z"
                                                },
                                                "brand": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Yamaha"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "model": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 5
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "YZF-R3"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "year": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 10
                                                        },
                                                        "year": {
                                                            "type": "integer",
                                                            "example": 2020
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No default motorcycle found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No default motorcycle set"
                                        },
                                        "data": {
                                            "type": "null",
                                            "example": null
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to retrieve default motorcycle"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Error message details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-garage/{id}/set-default": {
            "post": {
                "tags": [
                    "My Garage"
                ],
                "summary": "Set a motorcycle as default in user's garage",
                "description": "When a motorcycle is set as default, all other motorcycles in the garage will be set to non-default",
                "operationId": "187ed75cf4bcf9bd7c349152f15cd892",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Garage item ID to set as default",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default motorcycle updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Default motorcycle set successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "My Daily Beast",
                                                    "nullable": true
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Perfect bike for daily commuting",
                                                    "nullable": true
                                                },
                                                "picture": {
                                                    "type": "string",
                                                    "example": "https://example.com/bike.jpg",
                                                    "nullable": true
                                                },
                                                "is_default": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "brand": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Honda"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "model": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "CBR600RR"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "year": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "year": {
                                                            "type": "integer",
                                                            "example": 2020
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Garage item not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Not found"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Garage item not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to set default motorcycle"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Error message details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/plate-formats": {
            "post": {
                "tags": [
                    "Plate Formats"
                ],
                "summary": "Créer un nouveau format de plaque",
                "operationId": "96c0503d8d665eea176686c34eb611a6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "country_id",
                                    "fields"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Ajman Motorcycle Plate"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 13,
                                        "nullable": true
                                    },
                                    "background_color": {
                                        "type": "string",
                                        "example": "#FFFFFF"
                                    },
                                    "text_color": {
                                        "type": "string",
                                        "example": "#000000"
                                    },
                                    "width_mm": {
                                        "type": "integer",
                                        "example": 250
                                    },
                                    "height_mm": {
                                        "type": "integer",
                                        "example": 130
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Plaque moto Ajman réelle : chiffres (1‑5) en haut centre, lettre latine en bas centre"
                                    },
                                    "fields": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "field_name",
                                                "position",
                                                "character_type",
                                                "writing_system"
                                            ],
                                            "properties": {
                                                "field_name": {
                                                    "type": "string",
                                                    "example": "number"
                                                },
                                                "position": {
                                                    "type": "string",
                                                    "example": "top-center"
                                                },
                                                "character_type": {
                                                    "type": "string",
                                                    "example": "digit"
                                                },
                                                "writing_system": {
                                                    "type": "string",
                                                    "example": "latin"
                                                },
                                                "min_length": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "max_length": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "font_size": {
                                                    "type": "integer",
                                                    "example": 14
                                                },
                                                "is_bold": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "is_required": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "display_order": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "validation_pattern": {
                                                    "type": "string",
                                                    "example": "^[0-9]+$"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Format créé avec succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Format créé avec succès"
                                        },
                                        "format": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Erreur de validation"
                    }
                }
            }
        },
        "/api/check-promo": {
            "post": {
                "tags": [
                    "Promo Codes"
                ],
                "summary": "Check promo code validity and calculate discount",
                "description": "Validates a promo code and calculates the new price after applying the discount.",
                "operationId": "checkPromo",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "code",
                                    "total_price"
                                ],
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "example": "WELCOME10"
                                    },
                                    "total_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Promo code is valid and discount applied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "old_price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 100
                                        },
                                        "new_price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 80
                                        },
                                        "discount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 20
                                        },
                                        "discount_type": {
                                            "type": "string",
                                            "example": "percentage"
                                        },
                                        "discount_value": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 20
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "20% off on your next purchase"
                                        },
                                        "usage_count": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "total_usage_count": {
                                            "type": "integer",
                                            "example": 10
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Promo code is not valid (time, price, usage limit)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Promo code is not valid at this time."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promo code not found or inactive",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Promo code not found or inactive."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "code": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The code field is required."
                                                    }
                                                },
                                                "total_price": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The total price must be at least 0."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/roles": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get all roles",
                "operationId": "77e3636d8592997ce9d6d27b50857a69",
                "responses": {
                    "200": {
                        "description": "List of roles",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "admin"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Create a new role",
                "operationId": "4a563842fbfcad237f63da43065fca3d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "manager"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Role created"
                    }
                }
            }
        },
        "/api/roles/{id}": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role by ID",
                "operationId": "7fb0667a295b7678a30353aa11739683",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "admin"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Role not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update a role",
                "operationId": "786d6990093a8eb3a56931f19a827e43",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "admin_updated"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role updated"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role",
                "operationId": "8285c46981c60ad600aa4077307aec04",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Role deleted"
                    }
                }
            }
        },
        "/api/listings/{listingId}/soom": {
            "post": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Create a new SOOM (Submission of Offer on Market)",
                "description": "Create a new SOOM for a specific listing. Users can submit multiple SOOMs, but each must be higher than the previous highest amount.",
                "operationId": "createSoom",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing to submit SOOM for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "SOOM data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "amount"
                                ],
                                "properties": {
                                    "amount": {
                                        "description": "Amount of the SOOM offer",
                                        "type": "number",
                                        "format": "float",
                                        "minimum": 0,
                                        "example": 1500
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "SOOM created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM created successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "listing_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "user_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1500
                                                },
                                                "submission_date": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-18T16:30:00.000000Z"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "pending"
                                                },
                                                "min_soom": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1400
                                                },
                                                "user": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "John Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "john@example.com"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "previous_highest": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1400,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User must be logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Various authorization issues",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "enum": [
                                                "Submissions are not allowed for this listing.",
                                                "Sellers cannot submit SOOMs on their own listings."
                                            ],
                                            "example": "Submissions are not allowed for this listing."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Listing not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or amount too low",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Validation failed"
                                                },
                                                "errors": {
                                                    "properties": {
                                                        "amount": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": "The amount field is required."
                                                            }
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "The SOOM amount must be at least 1501."
                                                },
                                                "minimum_required": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1501
                                                },
                                                "current_highest": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1500,
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to create SOOM"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Database connection failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/{listingId}/sooms": {
            "get": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Get all SOOMs for a specific listing",
                "description": "Retrieve all SOOM submissions for a specific listing, ordered by amount (highest first)",
                "operationId": "getListingSooms",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing to get SOOMs for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Submissions retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Submissions retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "listing_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "user_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "amount": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 1500
                                                    },
                                                    "submission_date": {
                                                        "type": "string",
                                                        "format": "datetime",
                                                        "example": "2024-09-18T16:30:00.000000Z"
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "enum": [
                                                            "pending",
                                                            "accepted",
                                                            "rejected"
                                                        ],
                                                        "example": "pending"
                                                    },
                                                    "min_soom": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 1400
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "datetime",
                                                        "example": "2024-09-18T16:30:00.000000Z"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "datetime",
                                                        "example": "2024-09-18T16:30:00.000000Z"
                                                    },
                                                    "user": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 2
                                                            },
                                                            "first_name": {
                                                                "type": "string",
                                                                "example": "John"
                                                            },
                                                            "last_name": {
                                                                "type": "string",
                                                                "example": "Doe"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "john@example.com"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "total_submissions": {
                                            "type": "integer",
                                            "example": 3
                                        },
                                        "highest_amount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1500
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Listing not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/{listingId}/minimum-soom": {
            "get": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Get minimum SOOM amount for a listing",
                "description": "Get the minimum amount required for a new SOOM submission based on current highest bid",
                "operationId": "getMinimumSoomAmount",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Minimum amount retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "minimum_amount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1501
                                        },
                                        "current_highest": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1500,
                                            "nullable": true
                                        },
                                        "listing_minimum_bid": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1000,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Submissions not allowed for this listing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Submissions are not allowed for this listing."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Listing not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/submissions/{submissionId}/accept": {
            "patch": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Accept a SOOM submission",
                "description": "Accept a specific SOOM submission and automatically reject all other pending SOOMs for the same listing",
                "operationId": "acceptSoom",
                "parameters": [
                    {
                        "name": "submissionId",
                        "in": "path",
                        "description": "ID of the submission to accept",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SOOM accepted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM accepted successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "listing_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "user_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1500
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "accepted"
                                                },
                                                "acceptance_date": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-18T16:30:00.000000Z"
                                                },
                                                "user": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "first_name": {
                                                            "type": "string",
                                                            "example": "John"
                                                        },
                                                        "last_name": {
                                                            "type": "string",
                                                            "example": "Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "john@example.com"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "validation_deadline": {
                                            "type": "string",
                                            "format": "datetime",
                                            "example": "2024-09-23T16:30:00.000000Z"
                                        },
                                        "rejected_sooms_count": {
                                            "type": "integer",
                                            "example": 2
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Only seller can accept SOOMs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Only the seller can accept SOOMs for this listing."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Submission not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "SOOM already accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This SOOM has already been accepted."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to accept SOOM"
                                        },
                                        "details": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/submissions/{submissionId}/reject": {
            "patch": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Reject a SOOM submission",
                "description": "Reject a specific SOOM submission with optional rejection reason",
                "operationId": "rejectSoom",
                "parameters": [
                    {
                        "name": "submissionId",
                        "in": "path",
                        "description": "ID of the submission to reject",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "Optional rejection reason",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "reason": {
                                        "description": "Reason for rejection",
                                        "type": "string",
                                        "example": "Price too low for current market conditions"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "SOOM rejected successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM rejected successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "listing_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "user_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1500
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "rejected"
                                                },
                                                "rejection_reason": {
                                                    "type": "string",
                                                    "example": "Price too low for current market conditions",
                                                    "nullable": true
                                                },
                                                "user": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "first_name": {
                                                            "type": "string",
                                                            "example": "John"
                                                        },
                                                        "last_name": {
                                                            "type": "string",
                                                            "example": "Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "john@example.com"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied or cannot reject validated sale",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "enum": [
                                                "Only the seller can reject SOOMs for this listing.",
                                                "Cannot reject a SOOM with validated sale."
                                            ],
                                            "example": "Only the seller can reject SOOMs for this listing."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Submission not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "SOOM already rejected",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This SOOM has already been rejected."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to reject SOOM"
                                        },
                                        "details": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/submissions/{submissionId}/validate-sale": {
            "post": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Validate a sale after SOOM acceptance",
                "description": "Validate a sale for an accepted SOOM within 5 days of acceptance. Only sellers can validate sales.",
                "operationId": "validateSale",
                "parameters": [
                    {
                        "name": "submissionId",
                        "in": "path",
                        "description": "ID of the accepted submission to validate",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sale validated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Sale validated successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "listing_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "seller_id": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "buyer_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "bid_amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1500
                                                },
                                                "bid_date": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-18T16:30:00.000000Z"
                                                },
                                                "validated": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "validated_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-23T16:30:00.000000Z"
                                                },
                                                "validator_id": {
                                                    "type": "integer",
                                                    "example": 3
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "submission": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "listing_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "user_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1500
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "accepted"
                                                },
                                                "sale_validated": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "sale_validation_date": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-23T16:30:00.000000Z"
                                                },
                                                "user": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "first_name": {
                                                            "type": "string",
                                                            "example": "John"
                                                        },
                                                        "last_name": {
                                                            "type": "string",
                                                            "example": "Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "john@example.com"
                                                        },
                                                        "phone": {
                                                            "type": "string",
                                                            "example": "+1234567890",
                                                            "nullable": true
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "listing": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "title": {
                                                            "type": "string",
                                                            "example": "Yamaha R1"
                                                        },
                                                        "description": {
                                                            "type": "string",
                                                            "example": "Great motorcycle"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User must be logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied or invalid conditions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "enum": [
                                                "Only the seller can validate sales for this listing.",
                                                "Only accepted SOOMs can be validated."
                                            ],
                                            "example": "Only the seller can validate sales for this listing."
                                        },
                                        "current_status": {
                                            "type": "string",
                                            "example": "pending",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Submission not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation period expired or already validated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "This sale has already been validated."
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Validation period has expired. You had 5 days to validate this sale."
                                                },
                                                "acceptance_date": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-18T16:30:00.000000Z"
                                                },
                                                "validation_deadline": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-23T16:30:00.000000Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to validate sale"
                                        },
                                        "details": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/validated-sales": {
            "get": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Get all validated sales for authenticated user",
                "description": "Retrieve all validated sales where the user is either seller or buyer",
                "operationId": "getValidatedSales",
                "responses": {
                    "200": {
                        "description": "Validated sales retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validated sales retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "listing_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "seller_id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "buyer_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "bid_amount": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 1500
                                                    },
                                                    "validated": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "validated_at": {
                                                        "type": "string",
                                                        "format": "datetime"
                                                    },
                                                    "listing": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "title": {
                                                                "type": "string",
                                                                "example": "Yamaha R1"
                                                            },
                                                            "description": {
                                                                "type": "string",
                                                                "example": "Great motorcycle"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "buyer": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 2
                                                            },
                                                            "first_name": {
                                                                "type": "string",
                                                                "example": "John"
                                                            },
                                                            "last_name": {
                                                                "type": "string",
                                                                "example": "Doe"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "john@example.com"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "seller": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 3
                                                            },
                                                            "first_name": {
                                                                "type": "string",
                                                                "example": "Jane"
                                                            },
                                                            "last_name": {
                                                                "type": "string",
                                                                "example": "Smith"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "jane@example.com"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "stats": {
                                            "properties": {
                                                "total_sales": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "as_seller": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "as_buyer": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "total_amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 7500
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-listings-sooms": {
            "get": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Get SOOMs received on user's listings",
                "description": "Retrieve all SOOMs submitted on listings owned by the authenticated user",
                "operationId": "getMyListingsSooms",
                "responses": {
                    "200": {
                        "description": "SOOMs retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOMs retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "listing_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "user_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "amount": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 1500
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "example": "pending"
                                                    },
                                                    "submission_date": {
                                                        "type": "string",
                                                        "format": "datetime"
                                                    },
                                                    "sale_validated": {
                                                        "type": "boolean",
                                                        "example": false
                                                    },
                                                    "user": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 2
                                                            },
                                                            "first_name": {
                                                                "type": "string",
                                                                "example": "John"
                                                            },
                                                            "last_name": {
                                                                "type": "string",
                                                                "example": "Doe"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "john@example.com"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "listing": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "title": {
                                                                "type": "string",
                                                                "example": "Yamaha R1"
                                                            },
                                                            "description": {
                                                                "type": "string",
                                                                "example": "Great motorcycle"
                                                            },
                                                            "seller_id": {
                                                                "type": "integer",
                                                                "example": 3
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "stats": {
                                            "properties": {
                                                "total_sooms": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "pending_sooms": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "accepted_sooms": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "rejected_sooms": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "pending_validation": {
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/my-sooms": {
            "get": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Get user's submitted SOOMs",
                "description": "Retrieve all SOOMs submitted by the authenticated user",
                "operationId": "getMySooms",
                "responses": {
                    "200": {
                        "description": "My SOOMs retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "My SOOMs retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "listing_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "user_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "amount": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 1500
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "example": "pending"
                                                    },
                                                    "submission_date": {
                                                        "type": "string",
                                                        "format": "datetime"
                                                    },
                                                    "listing": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "title": {
                                                                "type": "string",
                                                                "example": "Yamaha R1"
                                                            },
                                                            "description": {
                                                                "type": "string",
                                                                "example": "Great motorcycle"
                                                            },
                                                            "seller_id": {
                                                                "type": "integer",
                                                                "example": 3
                                                            },
                                                            "country_id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "seller": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 3
                                                                    },
                                                                    "first_name": {
                                                                        "type": "string",
                                                                        "example": "Jane"
                                                                    },
                                                                    "last_name": {
                                                                        "type": "string",
                                                                        "example": "Smith"
                                                                    },
                                                                    "email": {
                                                                        "type": "string",
                                                                        "example": "jane@example.com"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "country": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 1
                                                                    },
                                                                    "code": {
                                                                        "type": "string",
                                                                        "example": "US"
                                                                    },
                                                                    "name": {
                                                                        "type": "string",
                                                                        "example": "United States"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "stats": {
                                            "properties": {
                                                "total_sooms": {
                                                    "type": "integer",
                                                    "example": 8
                                                },
                                                "pending_sooms": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "accepted_sooms": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "rejected_sooms": {
                                                    "type": "integer",
                                                    "example": 3
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/submissions/{submissionId}/cancel": {
            "delete": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Cancel a pending SOOM",
                "description": "Cancel a SOOM submission that is still in pending status",
                "operationId": "cancelSoom",
                "parameters": [
                    {
                        "name": "submissionId",
                        "in": "path",
                        "description": "ID of the submission to cancel",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SOOM cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM cancelled successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "listing_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "user_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1500
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "pending"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied or invalid status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "enum": [
                                                "You can only cancel your own SOOM submissions.",
                                                "You can only cancel pending SOOM submissions."
                                            ],
                                            "example": "You can only cancel your own SOOM submissions."
                                        },
                                        "current_status": {
                                            "type": "string",
                                            "example": "accepted"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Submission not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to cancel SOOM"
                                        },
                                        "details": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/submissions/{submissionId}/edit": {
            "put": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Edit a pending SOOM",
                "description": "Modify the amount of a SOOM submission that is still in pending status",
                "operationId": "editSoom",
                "parameters": [
                    {
                        "name": "submissionId",
                        "in": "path",
                        "description": "ID of the submission to edit",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated SOOM data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "amount"
                                ],
                                "properties": {
                                    "amount": {
                                        "description": "New amount for the SOOM",
                                        "type": "number",
                                        "format": "float",
                                        "minimum": 0,
                                        "example": 1600
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "SOOM updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM updated successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1600
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "pending"
                                                },
                                                "submission_date": {
                                                    "type": "string",
                                                    "format": "datetime"
                                                },
                                                "user": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "first_name": {
                                                            "type": "string",
                                                            "example": "John"
                                                        },
                                                        "last_name": {
                                                            "type": "string",
                                                            "example": "Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "john@example.com"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "previous_amount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1500
                                        },
                                        "current_highest": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1600
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied or invalid conditions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "enum": [
                                                "You can only edit your own SOOM submissions.",
                                                "You can only edit pending SOOM submissions.",
                                                "Submissions are no longer allowed for this listing."
                                            ],
                                            "example": "You can only edit your own SOOM submissions."
                                        },
                                        "current_status": {
                                            "type": "string",
                                            "example": "accepted"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Submission not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or amount too low",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Validation failed"
                                                },
                                                "errors": {
                                                    "properties": {
                                                        "amount": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string",
                                                                "example": "The amount field is required."
                                                            }
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "The SOOM amount must be at least 1501."
                                                },
                                                "minimum_required": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1501
                                                },
                                                "current_highest_other": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1500,
                                                    "nullable": true
                                                },
                                                "your_current_amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1400
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to update SOOM"
                                        },
                                        "details": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/{listingId}/last-soom": {
            "get": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Get the last SOOM for a listing",
                "description": "Get the most recent SOOM submission for a specific listing with user context information",
                "operationId": "getLastSoom",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Last SOOM retrieved successfully or no SOOMs found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "listing_minimum_bid": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1000
                                        },
                                        "is_seller": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "user_has_pending_soom": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "user_pending_soom": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1400
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "pending"
                                                }
                                            },
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object",
                                    "oneOf": [
                                        {
                                            "description": "When SOOMs exist",
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Last SOOM retrieved successfully"
                                                },
                                                "data": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "amount": {
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 1500
                                                        },
                                                        "status": {
                                                            "type": "string",
                                                            "example": "pending"
                                                        },
                                                        "submission_date": {
                                                            "type": "string",
                                                            "format": "datetime"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "has_sooms": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "total_sooms_count": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "minimum_bid_required": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1501
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "description": "When no SOOMs exist",
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "No SOOMs found for this listing"
                                                },
                                                "data": {
                                                    "type": "null"
                                                },
                                                "has_sooms": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total_sooms_count": {
                                                    "type": "integer",
                                                    "example": 0
                                                },
                                                "minimum_bid_required": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1000
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Listing not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/pending-validations": {
            "get": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Get pending sale validations",
                "description": "Get all accepted SOOMs awaiting sale validation from the authenticated seller",
                "operationId": "getPendingValidations",
                "responses": {
                    "200": {
                        "description": "Pending validations retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Pending validations retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "amount": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 1500
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "example": "accepted"
                                                    },
                                                    "acceptance_date": {
                                                        "type": "string",
                                                        "format": "datetime"
                                                    },
                                                    "sale_validated": {
                                                        "type": "boolean",
                                                        "example": false
                                                    },
                                                    "user": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 2
                                                            },
                                                            "first_name": {
                                                                "type": "string",
                                                                "example": "John"
                                                            },
                                                            "last_name": {
                                                                "type": "string",
                                                                "example": "Doe"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "john@example.com"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "listing": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "title": {
                                                                "type": "string",
                                                                "example": "Yamaha R1"
                                                            },
                                                            "description": {
                                                                "type": "string",
                                                                "example": "Great motorcycle"
                                                            },
                                                            "seller_id": {
                                                                "type": "integer",
                                                                "example": 3
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "total_pending": {
                                            "type": "integer",
                                            "example": 3
                                        },
                                        "expired_count": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/soom-stats": {
            "get": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Get SOOM statistics for authenticated user",
                "description": "Get comprehensive statistics for SOOMs as both seller and buyer",
                "operationId": "getSoomStats",
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Statistics retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "as_seller": {
                                                    "properties": {
                                                        "total_received": {
                                                            "type": "integer",
                                                            "example": 15
                                                        },
                                                        "pending": {
                                                            "type": "integer",
                                                            "example": 5
                                                        },
                                                        "accepted": {
                                                            "type": "integer",
                                                            "example": 4
                                                        },
                                                        "rejected": {
                                                            "type": "integer",
                                                            "example": 6
                                                        },
                                                        "validated_sales": {
                                                            "type": "integer",
                                                            "example": 3
                                                        },
                                                        "pending_validation": {
                                                            "type": "integer",
                                                            "example": 1
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "as_buyer": {
                                                    "properties": {
                                                        "total_sent": {
                                                            "type": "integer",
                                                            "example": 8
                                                        },
                                                        "pending": {
                                                            "type": "integer",
                                                            "example": 3
                                                        },
                                                        "accepted": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "rejected": {
                                                            "type": "integer",
                                                            "example": 3
                                                        },
                                                        "validated_purchases": {
                                                            "type": "integer",
                                                            "example": 1
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/{listingId}/mark-as-sold": {
            "patch": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Mark listing as sold",
                "description": "Mark a listing as sold when a transaction is completed. Only the seller can perform this action.",
                "operationId": "markListingAsSold",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing to mark as sold",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Listing marked as sold successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Listing marked as sold successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "Yamaha R1"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "sold"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-27T16:30:00.000000Z"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "rejected_sooms_count": {
                                            "type": "integer",
                                            "example": 3
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Only the seller can mark this listing as sold."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Listing not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This listing is already sold or inactive."
                                        },
                                        "current_status": {
                                            "type": "string",
                                            "example": "sold"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/{listingId}/close": {
            "patch": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Close/finalize listing",
                "description": "Close a listing when seller wants to end it without a sale (e.g., no agreement reached, decided not to sell, etc.). This action rejects all pending SOOMs.",
                "operationId": "closeListing",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing to close",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Listing closed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Listing closed successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "Yamaha R1"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "inactive"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-27T16:30:00.000000Z"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "rejected_sooms_count": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "notified_users_count": {
                                            "type": "integer",
                                            "example": 3
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. User must be logged in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Only the seller can close this listing."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Listing not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This listing is already closed or sold."
                                        },
                                        "current_status": {
                                            "type": "string",
                                            "example": "inactive"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/{listingId}/reopen": {
            "patch": {
                "tags": [
                    "SOOMs"
                ],
                "summary": "Reopen a closed listing",
                "description": "Reopen a previously closed listing. Only the seller can perform this action.",
                "operationId": "reopenListing",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing to reopen",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "Optional reopening details",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "allow_submission": {
                                        "description": "Whether to allow new SOOM submissions",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "reopening_notes": {
                                        "description": "Notes about why the listing is being reopened",
                                        "type": "string",
                                        "example": "Decided to continue selling after reconsideration",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Listing reopened successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Listing reopened successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "Yamaha R1"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "published"
                                                },
                                                "reopened_at": {
                                                    "type": "string",
                                                    "format": "datetime",
                                                    "example": "2024-09-27T16:30:00.000000Z"
                                                },
                                                "allow_submission": {
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Cannot reopen listing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Only closed listings can be reopened."
                                        },
                                        "current_status": {
                                            "type": "string",
                                            "example": "published"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get list of users",
                "operationId": "c457726701591d1183b53aa71fc13441",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of users"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "operationId": "592819a0265360b2014512d6dbfaf0e7",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "email",
                                    "role_id"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "type": "string"
                                    },
                                    "email": {
                                        "type": "string"
                                    },
                                    "phone": {
                                        "type": "string"
                                    },
                                    "birthday": {
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "gender": {
                                        "type": "string"
                                    },
                                    "profile_picture": {
                                        "type": "string"
                                    },
                                    "address": {
                                        "type": "string"
                                    },
                                    "postal_code": {
                                        "type": "string"
                                    },
                                    "role_id": {
                                        "type": "integer"
                                    },
                                    "country_id": {
                                        "type": "integer"
                                    },
                                    "language": {
                                        "type": "string"
                                    },
                                    "timezone": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "operationId": "36a33ff774d5cba33c039dec2c3e0287",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user details",
                "operationId": "b9091397c8b25f12c6adb74be6ce3a5a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "first_name": {
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "type": "string"
                                    },
                                    "email": {
                                        "type": "string"
                                    },
                                    "phone": {
                                        "type": "string"
                                    },
                                    "birthday": {
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "gender": {
                                        "type": "string"
                                    },
                                    "profile_picture": {
                                        "type": "string"
                                    },
                                    "address": {
                                        "type": "string"
                                    },
                                    "postal_code": {
                                        "type": "string"
                                    },
                                    "role_id": {
                                        "type": "integer"
                                    },
                                    "country_id": {
                                        "type": "integer"
                                    },
                                    "language": {
                                        "type": "string"
                                    },
                                    "timezone": {
                                        "type": "string"
                                    },
                                    "is_active": {
                                        "type": "boolean"
                                    },
                                    "is_online": {
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "operationId": "fa56cffde745d3f152f95cbacd936c0b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/wishlists": {
            "get": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Get user's wishlist (auth required)",
                "operationId": "978401ca2ca07b592255725cd25a443d",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wishlist retrieved successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Add listing to wishlist (auth required)",
                "operationId": "4bdf63de7775026077073b1069c45f64",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "listing_id"
                                ],
                                "properties": {
                                    "listing_id": {
                                        "type": "integer",
                                        "example": 5
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Added to wishlist"
                    },
                    "409": {
                        "description": "Already in wishlist"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/wishlists/{id}": {
            "get": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Get a wishlist by ID",
                "operationId": "b3cf1f24ca007a63db3f93f3e5e824d1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wishlist details"
                    },
                    "404": {
                        "description": "Wishlist not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Update a wishlist",
                "operationId": "d716f58b19d41444916708b6e9eac2c2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "listing_id": {
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Wishlist updated"
                    }
                }
            }
        },
        "/api/wishlists/{listing_id}": {
            "delete": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Remove listing from wishlist (auth required)",
                "operationId": "d9775cef34325e32f1d6dc67aa11e4ac",
                "parameters": [
                    {
                        "name": "listing_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Removed from wishlist"
                    },
                    "404": {
                        "description": "Wishlist item not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "BankCard": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "card_number": {
                        "type": "string",
                        "example": "**** **** **** 1234"
                    },
                    "card_holder_name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "expiration_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-12-31"
                    },
                    "cvv": {
                        "type": "string",
                        "example": "***"
                    },
                    "card_type_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "is_default": {
                        "type": "boolean",
                        "example": true
                    },
                    "BankCardType": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Visa"
                            },
                            "description": {
                                "type": "string",
                                "example": "Standard Visa Card"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "Enter token in format: Bearer <your-token>"
            }
        }
    },
    "tags": [
        {
            "name": "Bike Part Brands",
            "description": "API Endpoints for managing bike part brands"
        },
        {
            "name": "Filters",
            "description": "API endpoints for filtering listings"
        },
        {
            "name": "Guide Bookmarks",
            "description": "API Endpoints pour la gestion des favoris/bookmarks de guides"
        },
        {
            "name": "Guide Categories",
            "description": "API Endpoints pour la gestion des catégories de guides"
        },
        {
            "name": "Guide Comments",
            "description": "API Endpoints pour la gestion des commentaires de guides"
        },
        {
            "name": "Guides",
            "description": "API Endpoints pour la gestion des guides"
        },
        {
            "name": "Guide Images",
            "description": "API Endpoints pour la gestion des images de guides"
        },
        {
            "name": "Guide Likes",
            "description": "API Endpoints pour la gestion des likes de guides"
        },
        {
            "name": "Guide Tags",
            "description": "API Endpoints pour la gestion des tags de guides"
        },
        {
            "name": "License Plates",
            "description": "API endpoints for managing license plates"
        },
        {
            "name": "Motorcycle Brands"
        },
        {
            "name": "Motorcycles"
        },
        {
            "name": "Motorcycle Models"
        },
        {
            "name": "Motorcycle Types"
        },
        {
            "name": "Motorcycle Years"
        },
        {
            "name": "Wishlist",
            "description": "Operations related to wishlists"
        },
        {
            "name": "Authentification",
            "description": "Authentification"
        },
        {
            "name": "Bike Part Categories",
            "description": "Bike Part Categories"
        },
        {
            "name": "BankCards",
            "description": "BankCards"
        },
        {
            "name": "Card Types",
            "description": "Card Types"
        },
        {
            "name": "Categories",
            "description": "Categories"
        },
        {
            "name": "Colors",
            "description": "Colors"
        },
        {
            "name": "Event Activities",
            "description": "Event Activities"
        },
        {
            "name": "Event Categories",
            "description": "Event Categories"
        },
        {
            "name": "Event Contacts",
            "description": "Event Contacts"
        },
        {
            "name": "Events",
            "description": "Events"
        },
        {
            "name": "Event FAQs",
            "description": "Event FAQs"
        },
        {
            "name": "Event Favorites",
            "description": "Event Favorites"
        },
        {
            "name": "Event Participants",
            "description": "Event Participants"
        },
        {
            "name": "Event Reviews",
            "description": "Event Reviews"
        },
        {
            "name": "Event Sponsors",
            "description": "Event Sponsors"
        },
        {
            "name": "Event Tickets",
            "description": "Event Tickets"
        },
        {
            "name": "Event Updates",
            "description": "Event Updates"
        },
        {
            "name": "Image Upload",
            "description": "Image Upload"
        },
        {
            "name": "Listings",
            "description": "Listings"
        },
        {
            "name": "locations",
            "description": "locations"
        },
        {
            "name": "Motorcycles Comparison",
            "description": "Motorcycles Comparison"
        },
        {
            "name": "Motorcycle",
            "description": "Motorcycle"
        },
        {
            "name": "My Garage",
            "description": "My Garage"
        },
        {
            "name": "Plate Formats",
            "description": "Plate Formats"
        },
        {
            "name": "Promo Codes",
            "description": "Promo Codes"
        },
        {
            "name": "Roles",
            "description": "Roles"
        },
        {
            "name": "SOOMs",
            "description": "SOOMs"
        },
        {
            "name": "Users",
            "description": "Users"
        }
    ],
    "security": [
        {
            "bearerAuth": []
        }
    ]
}