{
    "openapi": "3.0.0",
    "info": {
        "title": "Mon API",
        "description": "Documentation de l'API avec Swagger",
        "contact": {
            "email": "contact@exemple.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/register": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Enregistrer un nouvel utilisateur",
                "operationId": "8a56853624e025573120a09a4c75d468",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "email",
                                    "phone",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+123456789"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "secret123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "secret123"
                                    },
                                    "role_id": {
                                        "type": "integer",
                                        "example": 2
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Registration successful, OTP required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Registration successful, OTP required for verification"
                                        },
                                        "user": {
                                            "type": "object"
                                        },
                                        "requiresOTP": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "otp_sent_via": {
                                            "type": "string",
                                            "example": "whatsapp"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "User login",
                "operationId": "a3b306d14572d1f4bd6c064b3233e7b8",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login",
                                    "password"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com or +123456789"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "secret123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login without 2FA",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "type": "object"
                                        },
                                        "token": {
                                            "type": "string"
                                        },
                                        "token_expiration": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Login with OTP required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "OTP required"
                                        },
                                        "requiresOTP": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "user_id": {
                                            "type": "integer"
                                        },
                                        "otp_sent_via": {
                                            "type": "string",
                                            "example": "whatsapp"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/api/resend-otp": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Resend OTP code",
                "operationId": "d345e764f1190fc7cfdc54bb87ec0a10",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com or +123456789"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "whatsapp",
                                            "email"
                                        ],
                                        "example": "email"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP resent successfully"
                    }
                }
            }
        },
        "/api/resend-otp-email": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Resend OTP via email only",
                "operationId": "7ff1b1e24e7e39eb9f830aa24f1ab643",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com or +123456789"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP resent via email successfully"
                    }
                }
            }
        },
        "/api/verify-otp": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Verify OTP code",
                "operationId": "7809ddcd47cab2525ccd43d1c2031bfd",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login",
                                    "otp"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com"
                                    },
                                    "otp": {
                                        "type": "string",
                                        "example": "1234"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP valid, authentication successful"
                    },
                    "401": {
                        "description": "Invalid or expired OTP"
                    }
                }
            }
        },
        "/api/me": {
            "get": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Get authenticated user information",
                "operationId": "9d9bc556f927575aa492a88c28fe5908",
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "User logout",
                "operationId": "fe8f3429cd6979b3b4517e186505f9f9",
                "responses": {
                    "200": {
                        "description": "Successfully logged out"
                    }
                }
            }
        },
        "/api/refresh": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Refresh JWT token",
                "operationId": "2c27d311a2876560fcb5a754b556cdc5",
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully"
                    }
                }
            }
        },
        "/api/user/update": {
            "put": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Update user profile",
                "operationId": "89ec70688080b1a0c14c7f4fcb01c1f4",
                "responses": {
                    "200": {
                        "description": "Profile updated successfully"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/user/two-factor-toggle": {
            "put": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Toggle two-factor authentication",
                "operationId": "8ce642e8986526322474e85e158a1a45",
                "responses": {
                    "200": {
                        "description": "Two-factor authentication toggled"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/forgot-password": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Send password reset OTP",
                "operationId": "7af8817e88ba5874543ff38f188248f1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com"
                                    },
                                    "method": {
                                        "type": "string",
                                        "enum": [
                                            "whatsapp",
                                            "email"
                                        ],
                                        "example": "email"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset OTP sent successfully"
                    }
                }
            }
        },
        "/api/reset-password": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Reset password using OTP code",
                "operationId": "00c0aad74830221c6da409a1355ec736",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "login",
                                    "code",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "login": {
                                        "type": "string",
                                        "example": "john.doe@example.com"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "1234"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpassword123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpassword123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully"
                    }
                }
            }
        },
        "/api/change-password": {
            "put": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Change current password",
                "operationId": "c9cf137ca229152d78da153d798cb251",
                "responses": {
                    "200": {
                        "description": "Password changed successfully"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/get-country": {
            "get": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Get user country and continent",
                "operationId": "fb0a07b92de42a0fb9bc3bc46d42456e",
                "responses": {
                    "200": {
                        "description": "Location information retrieved"
                    }
                }
            }
        },
        "/api/test-email": {
            "post": {
                "tags": [
                    "Authentification"
                ],
                "summary": "Test email sending (development only)",
                "operationId": "bdba0fbe8093cbe44f0733ff2c7f53b5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "test@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Test email sent successfully"
                    }
                }
            }
        },
        "/api/bike-part-brands": {
            "get": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Get all bike part brands",
                "operationId": "4084f52f749b5a8426f5a064b8ad12e2",
                "responses": {
                    "200": {
                        "description": "List of brands"
                    }
                }
            },
            "post": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Create a new bike part brand",
                "operationId": "5f93afc5f40009b6070036ceb59f3904",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Shimano"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/bike-part-brands/{id}": {
            "get": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Get a specific bike part brand",
                "operationId": "80864c6c3152868f81b11f4991a88aab",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand found"
                    },
                    "404": {
                        "description": "Brand not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Update a bike part brand",
                "operationId": "a89634c7797aa73912d79d3dd125d851",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Brand"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Brand updated successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Bike Part Brands"
                ],
                "summary": "Delete a bike part brand",
                "operationId": "0150a8926c28e698c8a0969f815d2c20",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand deleted successfully"
                    },
                    "404": {
                        "description": "Brand not found"
                    }
                }
            }
        },
        "/api/bike-part-categories": {
            "get": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Get all bike part categories",
                "description": "Display a listing of the resource.\nswagger",
                "operationId": "e1b0407e79465a85a6c11a7b1f0533cf",
                "responses": {
                    "200": {
                        "description": "List of categories"
                    }
                }
            },
            "post": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Create a new bike part category",
                "description": "Store a newly created resource in storage.\nswagger",
                "operationId": "a9032b26435e6aef60f3fb730e26cce0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Oil"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/bike-part-categories/{id}": {
            "get": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Get a specific bike part category",
                "description": "Display the specified resource.\nswagger",
                "operationId": "f6625fb70785abbd9fed45b5798e41b7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category found"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Update a bike part category",
                "description": "Update the specified resource in storage.\nswagger",
                "operationId": "892574b696b8b4d5facbd063b0480496",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Oil"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Bike Part Categories"
                ],
                "summary": "Delete a bike part category",
                "description": "Remove the specified resource from storage.\nswagger",
                "operationId": "5667b4358ec294aec2da9ca0d93507ac",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            }
        },
        "/api/BankCards": {
            "get": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Get all BankCards (Admin only)",
                "operationId": "e68c29d4d26f557a17b9e095146a4f0d",
                "responses": {
                    "200": {
                        "description": "List of BankCards"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/my-cards": {
            "get": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Get authenticated user's cards",
                "operationId": "af74c31afb9229905aa329697bf611f3",
                "responses": {
                    "200": {
                        "description": "List of user's bank cards",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BankCard"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Add a new card for the authenticated user",
                "operationId": "fec5900e84eda158df67dad987d7fe10",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "card_type_id"
                                ],
                                "properties": {
                                    "card_type_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "card_number": {
                                        "type": "string",
                                        "example": "1234 5678 9012 3456"
                                    },
                                    "card_holder_name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "expiration_date": {
                                        "description": "Format: MM/YY",
                                        "type": "string",
                                        "example": "12/25"
                                    },
                                    "cvv": {
                                        "type": "string",
                                        "example": "123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Card added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Bank card successfully added."
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/BankCard"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Card already exists"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/my-cards/{id}": {
            "put": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Update user's card",
                "operationId": "b08e8c3ae4447a9673d44c8b293d7434",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "card_holder_name": {
                                        "type": "string",
                                        "example": "John Doe Updated"
                                    },
                                    "expiration_date": {
                                        "type": "string",
                                        "example": "12/25"
                                    },
                                    "cvv": {
                                        "type": "string",
                                        "example": "456"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Card updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BankCard"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to update this card"
                    },
                    "404": {
                        "description": "Card not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Delete user's card",
                "operationId": "5f1c13a1fb9c7989240d1b0ab2460f9b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Card deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to delete this card"
                    },
                    "404": {
                        "description": "Card not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/BankCards/{id}": {
            "get": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Get BankCard by ID",
                "operationId": "a619b9cda83c954a3be2507121b083af",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BankCard details"
                    },
                    "404": {
                        "description": "BankCard not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Update BankCard (Admin only)",
                "operationId": "a65401dfc863d5335f41b711641ef234",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "New VIP BankCard"
                                    },
                                    "BankCard_type_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "BankCard updated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Delete BankCard (Admin only)",
                "operationId": "e391e402ce09c1cefda6e83740716372",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BankCard deleted"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/my-cards/{id}/set-default": {
            "patch": {
                "tags": [
                    "BankCards"
                ],
                "summary": "Set a card as default for the user",
                "operationId": "0acd3375ae2edd2e99577c30bf812e59",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card ID to set as default",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card set as default successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Card set as default successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/BankCard"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to update this card"
                    },
                    "404": {
                        "description": "Card not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/card-types": {
            "get": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Get all card types",
                "operationId": "53e444235db6a199d405047921f88269",
                "responses": {
                    "200": {
                        "description": "List of card types",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Visa"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Create a new card type",
                "operationId": "105617dc31a6892db1dd00822a9f4b6b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Visa"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Card type created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Visa"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/card-types/{id}": {
            "get": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Get a card type by ID",
                "operationId": "41bbaa5eb347b0f70f1bb6b293a9e589",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card type found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Visa"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Card type not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Update an existing card type",
                "operationId": "5fb058d35caa0167082c6f86a8833bfa",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "MasterCard"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Card type updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "MasterCard"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Card type not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Card Types"
                ],
                "summary": "Delete a card type",
                "operationId": "24575cfd80cc74e9b82c9910017c4f36",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Card type deleted"
                    },
                    "404": {
                        "description": "Card type not found"
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "operationId": "3f5817a34833d0a1f4af4548dd3aeaba",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Electronics"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "operationId": "71fcad552bb0eaba9fb191fd8d8dcab0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Electronics"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Electronics"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category by ID",
                "operationId": "c68e76d323c008827a9e47398b1583de",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Electronics"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update an existing category",
                "operationId": "0e686b2748211cc688333ed705dc111f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Home Appliances"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Home Appliances"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "operationId": "4c12e22a7f8c617bd83bfa1fdc05428d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            }
        },
        "/api/colors": {
            "get": {
                "tags": [
                    "Colors"
                ],
                "summary": "Get all colors",
                "operationId": "9af5ded8d7143a0f97e53725eda97464",
                "responses": {
                    "200": {
                        "description": "List of colors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Red"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Colors"
                ],
                "summary": "Create a new color",
                "operationId": "e4d3770c69f36a71c5936b3b35655342",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Blue"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Color created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Blue"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/colors/{id}": {
            "get": {
                "tags": [
                    "Colors"
                ],
                "summary": "Get a color by ID",
                "operationId": "c0e5a39d91e5093e2e0f77823615db5a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Color found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Red"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Color not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Colors"
                ],
                "summary": "Update an existing color",
                "operationId": "717be7234f38d1fb4ff4678ba4f59581",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Green"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Color updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Green"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Color not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Colors"
                ],
                "summary": "Delete a color",
                "operationId": "1667d6964960e3a8158e80e50c69f19c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Color deleted"
                    },
                    "404": {
                        "description": "Color not found"
                    }
                }
            }
        },
        "/api/filter/motorcycles": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "summary": "Filter motorcycles",
                "description": "Filter motorcycles by price, brand, and condition",
                "operationId": "filterMotorcycles",
                "parameters": [
                    {
                        "name": "min_price",
                        "in": "query",
                        "description": "Minimum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "max_price",
                        "in": "query",
                        "description": "Maximum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "brands[]",
                        "in": "query",
                        "description": "Array of brand IDs to filter",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "condition",
                        "in": "query",
                        "description": "Motorcycle condition",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "new",
                                "used",
                                "excellent",
                                "good",
                                "fair",
                                "poor"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "motorcycles": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "title": {
                                                        "type": "string",
                                                        "example": "Honda CBR600RR"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Excellent condition motorcycle"
                                                    },
                                                    "price": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 8500
                                                    },
                                                    "image": {
                                                        "type": "string",
                                                        "format": "url",
                                                        "example": "https://example.com/image.jpg",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/filter/spare-parts": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "summary": "Filter spare parts",
                "description": "Filter spare parts by price, brand, category, and condition",
                "operationId": "filterSpareParts",
                "parameters": [
                    {
                        "name": "min_price",
                        "in": "query",
                        "description": "Minimum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "max_price",
                        "in": "query",
                        "description": "Maximum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "bike_part_brands[]",
                        "in": "query",
                        "description": "Array of bike part brand IDs to filter",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "bike_part_categories[]",
                        "in": "query",
                        "description": "Array of bike part category IDs to filter",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "condition",
                        "in": "query",
                        "description": "Spare part condition",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "new",
                                "used",
                                "excellent",
                                "good",
                                "fair",
                                "poor"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "title": {
                                                "type": "string",
                                                "example": "Brake Pads Set"
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "High quality brake pads"
                                            },
                                            "price": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 45.99
                                            },
                                            "image": {
                                                "type": "string",
                                                "format": "url",
                                                "example": "https://example.com/image.jpg",
                                                "nullable": true
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/filter/license-plates": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "summary": "Filter license plates",
                "description": "Filter license plates by price, country, city, format and plate fields",
                "operationId": "filterLicensePlates",
                "parameters": [
                    {
                        "name": "min_price",
                        "in": "query",
                        "description": "Minimum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "max_price",
                        "in": "query",
                        "description": "Maximum price filter",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Filter by country ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "city_id",
                        "in": "query",
                        "description": "Filter by city ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "plate_format_id",
                        "in": "query",
                        "description": "Filter by license plate format ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "plate_search",
                        "in": "query",
                        "description": "Search value within license plate fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "price": {
                                                "type": "number",
                                                "format": "float"
                                            },
                                            "image": {
                                                "type": "string",
                                                "nullable": true
                                            },
                                            "license_plate": {
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/filter-options-license-plates": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "summary": "Get license plate filter options",
                "description": "Returns available filter options (countries, cities, formats, fields, price range) for license plates",
                "operationId": "getLicensePlateFilterOptions",
                "responses": {
                    "200": {
                        "description": "Filter options retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "filter_options": {
                                            "properties": {
                                                "countries": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "cities": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "plate_formats": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "format_fields": {
                                                    "type": "object"
                                                },
                                                "price_range": {
                                                    "properties": {
                                                        "min": {
                                                            "type": "number",
                                                            "example": 100
                                                        },
                                                        "max": {
                                                            "type": "number",
                                                            "example": 5000
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "api/login-phone-password": {
            "post": {
                "tags": [
                    "Authentication-firebase"
                ],
                "summary": "Login with phone and password",
                "description": "swagger",
                "operationId": "a54f4938cae0e31b8bf7567026defc47",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "phone": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "your_password_here"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Credentials valid, proceed with SMS verification",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Credentials valid, proceed with SMS verification"
                                        },
                                        "user_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "first_name": {
                                            "type": "string",
                                            "example": "John"
                                        },
                                        "last_name": {
                                            "type": "string",
                                            "example": "Doe"
                                        },
                                        "phone": {
                                            "type": "string",
                                            "example": "+1234567890"
                                        },
                                        "requiresFirebaseOTP": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "test@test.com"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Nom d'utilisateur ou mot de passe incorrect"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User inactive",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Utilisateur inactif"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/verify-otp": {
            "post": {
                "tags": [
                    "Authentication-firebase"
                ],
                "summary": "Verify OTP after authentication",
                "description": "swagger",
                "operationId": "7672b75b692526d2d4f60b1ef6e58929",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "otp": {
                                        "type": "string",
                                        "example": "1234"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP valid, authentication successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "your_jwt_token_here"
                                        },
                                        "token_expiration": {
                                            "type": "string",
                                            "example": "2023-10-01T00:00:00Z"
                                        },
                                        "country": {
                                            "type": "string",
                                            "example": "FR"
                                        },
                                        "continent": {
                                            "type": "string",
                                            "example": "Europe"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Utilisateur non trouvé"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid session",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Session invalide"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/complete-firebase-auth": {
            "post": {
                "tags": [
                    "Authentication-firebase"
                ],
                "summary": "Complete Firebase authentication after OTP verification",
                "description": "swagger",
                "operationId": "efbb3dd7f3bf9e435c4398f1722798b1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "idToken": {
                                        "type": "string",
                                        "example": "your_firebase_id_token_here"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Firebase token valid, authentication successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "your_jwt_token_here"
                                        },
                                        "token_expiration": {
                                            "type": "string",
                                            "example": "2023-10-01T00:00:00Z"
                                        },
                                        "country": {
                                            "type": "string",
                                            "example": "FR"
                                        },
                                        "continent": {
                                            "type": "string",
                                            "example": "Europe"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Utilisateur non trouvé"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid session or phone number mismatch",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Session invalide ou numéro de téléphone non correspondant"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/upload": {
            "post": {
                "tags": [
                    "Image Upload"
                ],
                "summary": "Upload multiple images",
                "description": "Allows users to upload multiple images to the server with automatic resizing.",
                "operationId": "uploadImages",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "images[]"
                                ],
                                "properties": {
                                    "images[]": {
                                        "description": "Multiple image files to upload (will be automatically resized)",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Images uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Images uploaded successfully"
                                        },
                                        "images": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "original": {
                                                        "type": "string",
                                                        "example": "http://yourdomain.com/storage/listings/image1.jpg"
                                                    },
                                                    "thumbnail": {
                                                        "type": "string",
                                                        "example": "http://yourdomain.com/storage/listings/thumbnails/image1_thumb.jpg"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "No images found in request."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Invalid image format."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "An error occurred while uploading images."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/upload/{filename}": {
            "delete": {
                "tags": [
                    "Image Upload"
                ],
                "summary": "Delete an uploaded image",
                "description": "Delete an uploaded image and its thumbnail",
                "operationId": "deleteImage",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "The filename of the image to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Image deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Image not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/license-plates": {
            "get": {
                "tags": [
                    "License Plates"
                ],
                "summary": "Get all license plates",
                "description": "Retrieve a list of all license plates with their related data",
                "operationId": "17f8fcb33c12ef3bcfa787325a5b56d7",
                "responses": {
                    "200": {
                        "description": "List of license plates retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "license_plates": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "listing_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "country_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "city_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "plate_format_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "city": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Paris"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "format": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "Standard Format"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "field_values": {
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer",
                                                                    "example": 1
                                                                },
                                                                "field_value": {
                                                                    "type": "string",
                                                                    "example": "ABC123"
                                                                },
                                                                "format_field": {
                                                                    "properties": {
                                                                        "id": {
                                                                            "type": "integer",
                                                                            "example": 1
                                                                        },
                                                                        "field_name": {
                                                                            "type": "string",
                                                                            "example": "Number"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "License Plates"
                ],
                "summary": "Create a new license plate",
                "description": "Creates a new license plate with associated field values",
                "operationId": "f826ff53cd0009627bea89feeadf1275",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "listing_id",
                                    "country_id",
                                    "city_id",
                                    "plate_format_id",
                                    "fields"
                                ],
                                "properties": {
                                    "listing_id": {
                                        "description": "ID of the listing",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "country_id": {
                                        "description": "ID of the country",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "description": "ID of the city",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "plate_format_id": {
                                        "description": "ID of the plate format",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "fields": {
                                        "description": "Array of field values",
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "field_id": {
                                                    "description": "ID of the format field",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "value": {
                                                    "description": "Value for the field",
                                                    "type": "string",
                                                    "example": "ABC123"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "License plate created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "License plate created successfully"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "description": "Validation errors",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Error message",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/license-plates/{id}": {
            "get": {
                "tags": [
                    "License Plates"
                ],
                "summary": "Get a specific license plate",
                "description": "Retrieve a specific license plate by ID with its related data",
                "operationId": "a3b07dd2f4ad5fb27642435eab0a7bca",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "License plate ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "License plate retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "license_plate": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "listing_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "country_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "city_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "plate_format_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "city": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Paris"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "format": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Standard Format"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "field_values": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "field_value": {
                                                                "type": "string",
                                                                "example": "ABC123"
                                                            },
                                                            "format_field": {
                                                                "properties": {
                                                                    "id": {
                                                                        "type": "integer",
                                                                        "example": 1
                                                                    },
                                                                    "field_name": {
                                                                        "type": "string",
                                                                        "example": "Number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "License plate not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/cities/{cityId}/plate-formats/details": {
            "get": {
                "tags": [
                    "License Plates"
                ],
                "summary": "Get plate formats by city with details",
                "description": "Retrieve all plate formats for a specific city with detailed field information",
                "operationId": "533d0edacc234e51c994ede55bfcc95d",
                "parameters": [
                    {
                        "name": "cityId",
                        "in": "path",
                        "description": "City ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plate formats retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "city": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Paris"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "formats": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Standard Format"
                                                    },
                                                    "country": {
                                                        "type": "string",
                                                        "example": "France"
                                                    },
                                                    "background_color": {
                                                        "type": "string",
                                                        "example": "#FFFFFF"
                                                    },
                                                    "text_color": {
                                                        "type": "string",
                                                        "example": "#000000"
                                                    },
                                                    "width_mm": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 520
                                                    },
                                                    "height_mm": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 110
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Standard French license plate"
                                                    },
                                                    "fields_count": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "fields": {
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer",
                                                                    "example": 1
                                                                },
                                                                "field_name": {
                                                                    "type": "string",
                                                                    "example": "Letters"
                                                                },
                                                                "position": {
                                                                    "type": "string",
                                                                    "example": "left"
                                                                },
                                                                "character_type": {
                                                                    "type": "string",
                                                                    "example": "alphabetic"
                                                                },
                                                                "writing_system": {
                                                                    "type": "string",
                                                                    "example": "latin"
                                                                },
                                                                "min_length": {
                                                                    "type": "integer",
                                                                    "example": 2
                                                                },
                                                                "max_length": {
                                                                    "type": "integer",
                                                                    "example": 3
                                                                },
                                                                "is_required": {
                                                                    "type": "boolean",
                                                                    "example": true
                                                                },
                                                                "validation_pattern": {
                                                                    "type": "string",
                                                                    "example": "^[A-Z]{2,3}$"
                                                                },
                                                                "font_size": {
                                                                    "type": "integer",
                                                                    "example": 12
                                                                },
                                                                "is_bold": {
                                                                    "type": "boolean",
                                                                    "example": true
                                                                },
                                                                "display_order": {
                                                                    "type": "integer",
                                                                    "example": 1
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/motorcycle": {
            "post": {
                "tags": [
                    "Listings"
                ],
                "summary": "Créer ou mettre à jour une annonce de moto (multi-étapes)",
                "operationId": "82e466deecdfc7f046318f30b8399c74",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "step": {
                                        "description": "Étape actuelle (1, 2 ou 3)",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "listing_id": {
                                        "description": "Obligatoire à partir de l'étape 2",
                                        "type": "integer",
                                        "example": 42
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Yamaha MT-07"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Moto bien entretenue"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 5000
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "auction_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "minimum_bid": {
                                        "type": "number",
                                        "example": 4000
                                    },
                                    "allow_submission": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "listing_type_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "contacting_channel": {
                                        "type": "string",
                                        "example": "phone"
                                    },
                                    "seller_type": {
                                        "type": "string",
                                        "example": "owner"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "brand_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "model_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "year_id": {
                                        "type": "integer",
                                        "example": 2020
                                    },
                                    "engine": {
                                        "type": "string",
                                        "example": "700cc"
                                    },
                                    "mileage": {
                                        "type": "integer",
                                        "example": 15000
                                    },
                                    "body_condition": {
                                        "type": "string",
                                        "example": "Bon état"
                                    },
                                    "modified": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "insurance": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "general_condition": {
                                        "type": "string",
                                        "example": "Excellent"
                                    },
                                    "vehicle_care": {
                                        "type": "string",
                                        "example": "Toujours au garage"
                                    },
                                    "transmission": {
                                        "type": "string",
                                        "example": "Manuelle"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Annonce moto enregistrée ou mise à jour avec succès"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/spare-part": {
            "post": {
                "tags": [
                    "Listings"
                ],
                "summary": "Créer ou mettre à jour une annonce de pièce détachée (multi-étapes)",
                "operationId": "e7bd91a7a7d7d7e0ab2c539cc2348a62",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "step": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "listing_id": {
                                        "type": "integer",
                                        "example": 45
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Pneu arrière"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Pneu en bon état"
                                    },
                                    "price": {
                                        "type": "number",
                                        "example": 200
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "auction_enabled": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "minimum_bid": {
                                        "type": "number",
                                        "example": null
                                    },
                                    "allow_submission": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "listing_type_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "contacting_channel": {
                                        "type": "string",
                                        "example": "email"
                                    },
                                    "seller_type": {
                                        "type": "string",
                                        "example": "dealer"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "condition": {
                                        "type": "string",
                                        "example": "used"
                                    },
                                    "motorcycles": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "brand_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "model_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "year_id": {
                                                    "type": "integer",
                                                    "example": 2020
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Annonce pièce détachée enregistrée ou mise à jour avec succès"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/license-plate": {
            "post": {
                "tags": [
                    "Listings"
                ],
                "summary": "Créer ou mettre à jour une annonce de plaque d'immatriculation (multi-étapes)",
                "operationId": "fd028dfaaee30bf948a3880d3acb1632",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "step": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "listing_id": {
                                        "type": "integer",
                                        "example": 46
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Plaque personnalisée"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Plaque ABC123 rouge"
                                    },
                                    "price": {
                                        "type": "number",
                                        "example": 800
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 8
                                    },
                                    "auction_enabled": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "minimum_bid": {
                                        "type": "number",
                                        "example": 500
                                    },
                                    "allow_submission": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "listing_type_id": {
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "contacting_channel": {
                                        "type": "string",
                                        "example": "whatsapp"
                                    },
                                    "seller_type": {
                                        "type": "string",
                                        "example": "owner"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "plate_format_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "country_id_lp": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id_lp": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "fields": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "field_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "example": "ABC123"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Annonce plaque immatriculation enregistrée ou mise à jour avec succès"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/country/{country_id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get listings by country",
                "operationId": "de654be482468b274c9b346c2eb652e4",
                "parameters": [
                    {
                        "name": "country_id",
                        "in": "path",
                        "description": "Country ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "price": {
                                                "type": "number"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "city": {
                                                "type": "string"
                                            },
                                            "country": {
                                                "type": "string"
                                            },
                                            "images": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "wishlist": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/by-category/{category_id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get listings by category",
                "operationId": "8e72591327b6671d611c12f535bc1c22",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "path",
                        "description": "Category ID (1=Motorcycle, 2=SparePart, 3=LicensePlate)",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Filter by country name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "plate_search",
                        "in": "query",
                        "description": "Search in license plate field values (only for category_id=3)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "123"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "searched_country": {
                                            "type": "string"
                                        },
                                        "showing_all_countries": {
                                            "type": "boolean"
                                        },
                                        "total_listings": {
                                            "type": "integer"
                                        },
                                        "listings": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    },
                                                    "price": {
                                                        "type": "number"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "city": {
                                                        "type": "string"
                                                    },
                                                    "country": {
                                                        "type": "string"
                                                    },
                                                    "images": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "wishlist": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/city/{city_id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get listings by city",
                "operationId": "43b58e1b7294348aaca05f3293481cd0",
                "parameters": [
                    {
                        "name": "city_id",
                        "in": "path",
                        "description": "City ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "price": {
                                                "type": "number"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "city": {
                                                "type": "string"
                                            },
                                            "country": {
                                                "type": "string"
                                            },
                                            "images": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "wishlist": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/filter": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Filter listings",
                "operationId": "47ab8489cc4860d88d2cf929c47b4f47",
                "parameters": [
                    {
                        "name": "city_id",
                        "in": "query",
                        "description": "City ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Country ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Category ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Filtered listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "price": {
                                                "type": "number"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "city": {
                                                "type": "string"
                                            },
                                            "country": {
                                                "type": "string"
                                            },
                                            "images": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "wishlist": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/latest/{city_id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get latest listings by city",
                "operationId": "0d472ecc656be8404204a3975a20ffac",
                "parameters": [
                    {
                        "name": "city_id",
                        "in": "path",
                        "description": "City ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest 10 listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "price": {
                                                "type": "number"
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "city": {
                                                "type": "string"
                                            },
                                            "country": {
                                                "type": "string"
                                            },
                                            "images": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "wishlist": {
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/{id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get listing by ID",
                "operationId": "b905f326db31dcc60e5f3cc2a1ad05d2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Listing ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Listing details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "title": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "price": {
                                            "type": "number"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "city": {
                                            "type": "string"
                                        },
                                        "country": {
                                            "type": "string"
                                        },
                                        "images": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "wishlist": {
                                            "type": "boolean"
                                        },
                                        "category_id": {
                                            "type": "integer"
                                        },
                                        "submission": {
                                            "type": "object",
                                            "nullable": true
                                        },
                                        "seller": {
                                            "type": "object",
                                            "nullable": true
                                        },
                                        "motorcycle": {
                                            "type": "object",
                                            "nullable": true
                                        },
                                        "spare_part": {
                                            "type": "object",
                                            "nullable": true
                                        },
                                        "license_plate": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found"
                    }
                }
            }
        },
        "/api/listings": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get all listings with pagination",
                "operationId": "8f9a3e0af2ef4de078f651d773cbefbb",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer"
                                        },
                                        "last_page": {
                                            "type": "integer"
                                        },
                                        "total": {
                                            "type": "integer"
                                        },
                                        "per_page": {
                                            "type": "integer"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    },
                                                    "price": {
                                                        "type": "number"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "city": {
                                                        "type": "string"
                                                    },
                                                    "country": {
                                                        "type": "string"
                                                    },
                                                    "images": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "wishlist": {
                                                        "type": "boolean"
                                                    },
                                                    "category_id": {
                                                        "type": "integer"
                                                    },
                                                    "motorcycle": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "license_plate": {
                                                        "type": "object",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/my-listing": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Récupérer les annonces de l'utilisateur connecté avec les détails selon la catégorie",
                "operationId": "c45df03a980317ef861e77628c045275",
                "responses": {
                    "200": {
                        "description": "Liste des annonces de l'utilisateur",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/pricing": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get price by model ID",
                "operationId": "e446d6e3b1cbe8818ae9407bb62572dd",
                "parameters": [
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "Model ID",
                        "required": true
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Category ID",
                        "required": true
                    },
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Country ID",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Price details"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/brands/listings-count": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get motorcycle brands with listing count",
                "operationId": "9419470fe1e851c9dec9829e9203b752",
                "responses": {
                    "200": {
                        "description": "List of motorcycle brands with their listing counts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "listings_count": {
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories/{categoryId}/price-range": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get price range for a specific category",
                "description": "Retrieve minimum and maximum prices for listings in a specific category",
                "operationId": "9d0c2313a78a00f1e15527063f450cce",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Category ID (1=Motorcycle, 2=SparePart, 3=LicensePlate)",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                1,
                                2,
                                3
                            ],
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Price range retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Price range retrieved successfully"
                                        },
                                        "category_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "min_price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 5000
                                        },
                                        "max_price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 25000
                                        },
                                        "total_listings": {
                                            "type": "integer",
                                            "example": 45
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid category ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid category_id. Only categories 1, 2, or 3 are allowed."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to retrieve price range"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Database connection failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/listings/draft": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get draft listings for the authenticated seller",
                "description": "swagger get",
                "operationId": "96012e13fb8f72de171f17d294daf220",
                "responses": {
                    "200": {
                        "description": "Draft listings fetched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listings fetched successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    },
                                                    "price": {
                                                        "type": "number"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "city": {
                                                        "type": "string"
                                                    },
                                                    "country": {
                                                        "type": "string"
                                                    },
                                                    "images": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "category_id": {
                                                        "type": "integer"
                                                    },
                                                    "motorcycle": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "sparePart": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "licensePlate": {
                                                        "type": "object",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to fetch draft listings"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Database connection failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/listings/draft/{id}": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get a specific draft listing by ID for the authenticated seller",
                "description": "Summary of getDraftListingById\nswagger get",
                "operationId": "fe00ae5367b2d31c80c702734db1b072",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the draft listing",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Draft listing fetched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listing fetched successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 123
                                                },
                                                "title": {
                                                    "type": "string",
                                                    "example": "My Listing Title"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Description of the listing"
                                                },
                                                "price": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1999.99
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2025-07-08T15:30:00Z"
                                                },
                                                "city": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Casablanca"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "nullable": true
                                                },
                                                "country": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Morocco"
                                                        }
                                                    },
                                                    "type": "object",
                                                    "nullable": true
                                                },
                                                "images": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 10
                                                            },
                                                            "image_url": {
                                                                "type": "string",
                                                                "example": "https://example.com/image.jpg"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "category_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "motorcycle": {
                                                    "type": "object",
                                                    "nullable": true
                                                },
                                                "sparePart": {
                                                    "type": "object",
                                                    "nullable": true
                                                },
                                                "licensePlate": {
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Draft listing not found or access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listing not found or access denied"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Listings"
                ],
                "summary": "Delete a single draft listing by ID",
                "operationId": "aee3d907166fde42e5f542a24089da94",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the draft listing to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Draft listing deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listing deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found or not a draft",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Draft listing not found or unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to delete listing"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "Database error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/recent": {
            "get": {
                "tags": [
                    "Listings"
                ],
                "summary": "Get last 10 listings (all categories)",
                "operationId": "10f1b5962dc1fe361541cbef51d839f6",
                "parameters": [
                    {
                        "name": "country",
                        "in": "query",
                        "description": "Filter by country name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recent listings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "searched_country": {
                                            "type": "string"
                                        },
                                        "showing_all_countries": {
                                            "type": "boolean"
                                        },
                                        "total_listings": {
                                            "type": "integer"
                                        },
                                        "listings": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    },
                                                    "price": {
                                                        "type": "number"
                                                    },
                                                    "category_id": {
                                                        "type": "integer"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "city": {
                                                        "type": "string"
                                                    },
                                                    "country": {
                                                        "type": "string"
                                                    },
                                                    "images": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "motorcycle": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "spare_part": {
                                                        "type": "object",
                                                        "nullable": true
                                                    },
                                                    "license_plate": {
                                                        "type": "object",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/locations": {
            "get": {
                "tags": [
                    "locations"
                ],
                "summary": "display all countries and cities",
                "description": "Get all countries and cities",
                "operationId": "getLocations",
                "parameters": [
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "ID of the country to filter cities",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "city_id",
                        "in": "query",
                        "description": "ID of the city to filter countries",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "countries": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "code": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "cities": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "country_id": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Resource not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Internal Server Error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "servers": [
                    {
                        "url": "http://localhost:8000",
                        "description": "Local server"
                    },
                    {
                        "url": "https://api.example.com",
                        "description": "Production server"
                    },
                    {
                        "url": "https://staging.api.example.com",
                        "description": "Staging server"
                    },
                    {
                        "url": "https://dev.api.example.com",
                        "description": "Development server"
                    }
                ]
            }
        },
        "/api/countries": {
            "post": {
                "tags": [
                    "locations"
                ],
                "summary": "Create a new country",
                "description": "Store a new country",
                "operationId": "storeCountry",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "France"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "FR"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Country created successfully"
                    }
                }
            }
        },
        "/api/countries/{id}": {
            "put": {
                "tags": [
                    "locations"
                ],
                "summary": "Update a country",
                "description": "Update a country by ID",
                "operationId": "updateCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the country to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "France"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "FR"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Country updated successfully"
                    }
                }
            },
            "delete": {
                "tags": [
                    "locations"
                ],
                "summary": "Delete a country",
                "description": "Delete a country by ID",
                "operationId": "destroyCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the country to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Country deleted successfully"
                    }
                }
            }
        },
        "/api/cities": {
            "post": {
                "tags": [
                    "locations"
                ],
                "summary": "Create a new city",
                "description": "Store a new city",
                "operationId": "storeCity",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "country_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Paris"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "City created successfully"
                    }
                }
            }
        },
        "/api/cities/{id}": {
            "put": {
                "tags": [
                    "locations"
                ],
                "summary": "Update a city",
                "description": "Update a city by ID",
                "operationId": "updateCity",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the city to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "country_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Lyon"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "City updated successfully"
                    }
                }
            },
            "delete": {
                "tags": [
                    "locations"
                ],
                "summary": "Delete a city",
                "description": "Delete a city by ID",
                "operationId": "destroyCity",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the city to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "City deleted successfully"
                    }
                }
            }
        },
        "/api/motorcycle-brands": {
            "get": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Get all motorcycle brands",
                "operationId": "ecf4810f772f5ef0f46e563ff8ea5a3d",
                "responses": {
                    "200": {
                        "description": "List of motorcycle brands"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Create a new motorcycle brand",
                "operationId": "ca62f9a53aae429317a0d555db0db234",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Honda"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle brand created"
                    }
                }
            }
        },
        "/api/motorcycle-brands/{id}": {
            "get": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Get a motorcycle brand by ID",
                "operationId": "4353d4620781aea0f89414d16ba72e0f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle brand data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Update a motorcycle brand",
                "operationId": "07d7155dc636ccf7569dd392a5d4e404",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Yamaha"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle brand updated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycle Brands"
                ],
                "summary": "Delete a motorcycle brand",
                "operationId": "bb9a49f49175528d85d778649c2fc2f5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle brand deleted successfully"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/motorcycles": {
            "get": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Get all motorcycles",
                "operationId": "c0f4e4f3a808887d946e4cc85a622b96",
                "responses": {
                    "200": {
                        "description": "List of motorcycles"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Create a new motorcycle",
                "operationId": "94a6589d128340e0e630959bfce11074",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "brand_id",
                                    "model_id",
                                    "year_id",
                                    "color"
                                ],
                                "properties": {
                                    "brand_id": {
                                        "type": "integer"
                                    },
                                    "model_id": {
                                        "type": "integer"
                                    },
                                    "year_id": {
                                        "type": "integer"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "Red"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle created"
                    }
                }
            }
        },
        "/api/motorcycles/{id}": {
            "get": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Get a motorcycle by ID",
                "operationId": "edbfbe97c12800775c8e6f5479e9fbff",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Update a motorcycle",
                "operationId": "51d631f35a9d36781f427b8dee84618e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "brand_id",
                                    "model_id",
                                    "year_id",
                                    "color"
                                ],
                                "properties": {
                                    "brand_id": {
                                        "type": "integer"
                                    },
                                    "model_id": {
                                        "type": "integer"
                                    },
                                    "year_id": {
                                        "type": "integer"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "Black"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle updated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycles"
                ],
                "summary": "Delete a motorcycle",
                "operationId": "380bb8e8e4e201f4304b027a4c56adcc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/motorcycle/brands": {
            "get": {
                "tags": [
                    "Motorcycle"
                ],
                "summary": "Get all motorcycle brands",
                "operationId": "3af91f5a44ae6c943fdd8df3e034f861",
                "responses": {
                    "200": {
                        "description": "List of brands",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Honda"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/motorcycle/models/{brandId}": {
            "get": {
                "tags": [
                    "Motorcycle"
                ],
                "summary": "Get models by brand ID",
                "operationId": "3d618db6438f249f8e1bf6305db56719",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Brand ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of models for the brand",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "CBR500R"
                                                    },
                                                    "brand_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/motorcycle/years/{modelId}": {
            "get": {
                "tags": [
                    "Motorcycle"
                ],
                "summary": "Get years by model ID",
                "operationId": "c4ca5b993dec6ba6a7d552e4d80d831f",
                "parameters": [
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "Model ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 2
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of years for the model",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "year": {
                                                        "type": "integer",
                                                        "example": 2022
                                                    },
                                                    "model_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/motorcycle/details/{yearId}": {
            "get": {
                "tags": [
                    "Motorcycle"
                ],
                "summary": "Get complete details by year ID",
                "operationId": "f87c963e7d5a91f61e3d648802309668",
                "parameters": [
                    {
                        "name": "yearId",
                        "in": "path",
                        "description": "Year ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 3
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complete motorcycle details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "year_id": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "year": {
                                                    "type": "integer",
                                                    "example": 2022
                                                },
                                                "model_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "model_name": {
                                                    "type": "string",
                                                    "example": "CBR500R"
                                                },
                                                "brand_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "brand_name": {
                                                    "type": "string",
                                                    "example": "Honda"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/motorcycle-models": {
            "get": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Get all motorcycle models",
                "operationId": "9cf26095369c0a1f24ccdc59eb5e8e8f",
                "responses": {
                    "200": {
                        "description": "List of motorcycle models"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Create a new motorcycle model",
                "operationId": "348e2a1f71de4990c263a894b77438d4",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "brand_id",
                                    "name",
                                    "type_id"
                                ],
                                "properties": {
                                    "brand_id": {
                                        "type": "integer"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "CBR600RR"
                                    },
                                    "type_id": {
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle model created"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/motorcycle-models/{id}": {
            "get": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Get a motorcycle model by ID",
                "operationId": "46db16be3a19f6d3906d8c279c984480",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle model data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Update a motorcycle model",
                "operationId": "b8d3d0d6c6d3dafb99f779cc7ee53fd7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "brand_id",
                                    "name",
                                    "type_id"
                                ],
                                "properties": {
                                    "brand_id": {
                                        "type": "integer"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "MT-07"
                                    },
                                    "type_id": {
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle model updated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycle Models"
                ],
                "summary": "Delete a motorcycle model",
                "operationId": "66a3f0979775886a398e833255b2b2e3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/motorcycle-types": {
            "get": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Get all motorcycle types",
                "operationId": "297a51041d61f5f3f541a47f0193a7cc",
                "responses": {
                    "200": {
                        "description": "List of motorcycle types or no data"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Create a new motorcycle type",
                "operationId": "7ad0d99989baeb77ed42f540f0f9180d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sport"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle type created successfully"
                    }
                }
            }
        },
        "/api/motorcycle-types/{id}": {
            "get": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Get a motorcycle type by ID",
                "operationId": "b0d8d440778b00f40145cac0d48582cf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle type data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Update a motorcycle type",
                "operationId": "5271c1e7521208c1d4922ca3050335d5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Cruiser"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle type updated successfully"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycle Types"
                ],
                "summary": "Delete a motorcycle type",
                "operationId": "f7228e3cb76ec733860fd962dd073913",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle type deleted successfully"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/motorcycle-years": {
            "get": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Get all motorcycle years",
                "operationId": "341e8e6f23ee659e345ec02d77ffb7e9",
                "responses": {
                    "200": {
                        "description": "List of motorcycle years"
                    }
                }
            },
            "post": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Create a new motorcycle year",
                "operationId": "7a8fb72eb322da9dd6050001bae9202c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "year"
                                ],
                                "properties": {
                                    "year": {
                                        "type": "integer",
                                        "example": 2024
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Motorcycle year created"
                    }
                }
            }
        },
        "/api/motorcycle-years/{id}": {
            "get": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Get a motorcycle year by ID",
                "operationId": "9c6d31e9a81d04ae7368a2383d43aaf8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motorcycle year data"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Update a motorcycle year",
                "operationId": "66699870e0fd7df9d075334cf3f5b8d1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "year"
                                ],
                                "properties": {
                                    "year": {
                                        "type": "integer",
                                        "example": 2025
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Motorcycle year updated"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Motorcycle Years"
                ],
                "summary": "Delete a motorcycle year",
                "operationId": "5568e4b4440ea6a005c2cce8c74bfdce",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/plate-formats": {
            "post": {
                "tags": [
                    "Plate Formats"
                ],
                "summary": "Créer un nouveau format de plaque",
                "operationId": "96c0503d8d665eea176686c34eb611a6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "country_id",
                                    "fields"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Ajman Motorcycle Plate"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 13,
                                        "nullable": true
                                    },
                                    "background_color": {
                                        "type": "string",
                                        "example": "#FFFFFF"
                                    },
                                    "text_color": {
                                        "type": "string",
                                        "example": "#000000"
                                    },
                                    "width_mm": {
                                        "type": "integer",
                                        "example": 250
                                    },
                                    "height_mm": {
                                        "type": "integer",
                                        "example": 130
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Plaque moto Ajman réelle : chiffres (1‑5) en haut centre, lettre latine en bas centre"
                                    },
                                    "fields": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "field_name",
                                                "position",
                                                "character_type",
                                                "writing_system"
                                            ],
                                            "properties": {
                                                "field_name": {
                                                    "type": "string",
                                                    "example": "number"
                                                },
                                                "position": {
                                                    "type": "string",
                                                    "example": "top-center"
                                                },
                                                "character_type": {
                                                    "type": "string",
                                                    "example": "digit"
                                                },
                                                "writing_system": {
                                                    "type": "string",
                                                    "example": "latin"
                                                },
                                                "min_length": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "max_length": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "font_size": {
                                                    "type": "integer",
                                                    "example": 14
                                                },
                                                "is_bold": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "is_required": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "display_order": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "validation_pattern": {
                                                    "type": "string",
                                                    "example": "^[0-9]+$"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Format créé avec succès",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Format créé avec succès"
                                        },
                                        "format": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Erreur de validation"
                    }
                }
            }
        },
        "/api/check-promo": {
            "post": {
                "tags": [
                    "Promo Codes"
                ],
                "summary": "Check promo code validity and calculate discount",
                "description": "Validates a promo code and calculates the new price after applying the discount.",
                "operationId": "checkPromo",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "code",
                                    "total_price"
                                ],
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "example": "WELCOME10"
                                    },
                                    "total_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Promo code is valid and discount applied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "old_price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 100
                                        },
                                        "new_price": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 80
                                        },
                                        "discount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 20
                                        },
                                        "discount_type": {
                                            "type": "string",
                                            "example": "percentage"
                                        },
                                        "discount_value": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 20
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "20% off on your next purchase"
                                        },
                                        "usage_count": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "total_usage_count": {
                                            "type": "integer",
                                            "example": 10
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Promo code is not valid (time, price, usage limit)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Promo code is not valid at this time."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Promo code not found or inactive",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Promo code not found or inactive."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "code": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The code field is required."
                                                    }
                                                },
                                                "total_price": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The total price must be at least 0."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/roles": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get all roles",
                "operationId": "77e3636d8592997ce9d6d27b50857a69",
                "responses": {
                    "200": {
                        "description": "List of roles",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "admin"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Create a new role",
                "operationId": "4a563842fbfcad237f63da43065fca3d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "manager"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Role created"
                    }
                }
            }
        },
        "/api/roles/{id}": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role by ID",
                "operationId": "7fb0667a295b7678a30353aa11739683",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "admin"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Role not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update a role",
                "operationId": "786d6990093a8eb3a56931f19a827e43",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "admin_updated"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role updated"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role",
                "operationId": "8285c46981c60ad600aa4077307aec04",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Role deleted"
                    }
                }
            }
        },
        "/api/listings/{listingId}/soom": {
            "post": {
                "tags": [
                    "Soom"
                ],
                "summary": "Create a new SOOM submission",
                "description": "Créer une nouvelle soumission SOOM",
                "operationId": "6432925f30c0b58ce3963b7d0c590794",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing to submit a SOOM for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "amount": {
                                        "description": "Amount of the SOOM submission",
                                        "type": "number",
                                        "format": "float"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "SOOM created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Submission"
                                        },
                                        "previous_highest": {
                                            "description": "Previous highest SOOM amount",
                                            "type": "number",
                                            "format": "float"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Listing not found"
                    },
                    "422": {
                        "description": "Validation failed"
                    }
                }
            }
        },
        "/api/listings/{listingId}/sooms": {
            "get": {
                "tags": [
                    "Soom"
                ],
                "summary": "Get all SOOM submissions for a listing",
                "description": "Obtenir toutes les soumissions pour un listing",
                "operationId": "af6ebda30f506c2176cfa4fd8d6a25c8",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing to get SOOMs for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Submissions retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Submissions retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Submission"
                                            }
                                        },
                                        "total_submissions": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "highest_amount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 150
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found"
                    }
                }
            }
        },
        "/api/listings/{listingId}/minimum-soom": {
            "get": {
                "tags": [
                    "Soom"
                ],
                "summary": "Get minimum SOOM amount required for a listing",
                "description": "Obtenir le montant minimum requis pour un nouveau SOOM",
                "operationId": "19c269d5eeb7637b055a0d28f8496d6e",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Minimum amount retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "minimum_amount": {
                                            "type": "number",
                                            "format": "float"
                                        },
                                        "current_highest": {
                                            "type": "number",
                                            "format": "float"
                                        },
                                        "listing_minimum_bid": {
                                            "type": "number",
                                            "format": "float"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found"
                    },
                    "403": {
                        "description": "Submissions not allowed"
                    }
                }
            }
        },
        "/api/submissions/{submissionId}/accept": {
            "patch": {
                "tags": [
                    "Soom"
                ],
                "summary": "Accept a SOOM submission (seller only)",
                "description": "Accepter un SOOM (pour le vendeur)",
                "operationId": "0b796bb387ce399962b23e55d56d3031",
                "parameters": [
                    {
                        "name": "submissionId",
                        "in": "path",
                        "description": "ID of the submission to accept",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SOOM accepted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM accepted successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Submission"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Only seller can accept"
                    },
                    "404": {
                        "description": "Submission not found"
                    }
                }
            }
        },
        "/api/submissions/{submissionId}/reject": {
            "patch": {
                "tags": [
                    "Soom"
                ],
                "summary": "Reject a SOOM submission (seller only)",
                "description": "Rejeter un SOOM (pour le vendeur)",
                "operationId": "b1e52cdb9a7c325399eb3cd9f7de0720",
                "parameters": [
                    {
                        "name": "submissionId",
                        "in": "path",
                        "description": "ID of the submission to reject",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "reason": {
                                        "description": "Optional reason for rejection",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "SOOM rejected successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM rejected successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Submission"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Only seller can reject"
                    },
                    "404": {
                        "description": "Submission not found"
                    }
                }
            }
        },
        "/api/my-listings-sooms": {
            "get": {
                "tags": [
                    "Soom"
                ],
                "summary": "Get all SOOMs received on my listings",
                "description": "Obtenir tous les SOOMs reçus sur mes listings (pour le vendeur)",
                "operationId": "147e1b7fdcccdace378c1587414b1808",
                "responses": {
                    "200": {
                        "description": "SOOMs retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOMs retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Submission"
                                            }
                                        },
                                        "stats": {
                                            "properties": {
                                                "total_sooms": {
                                                    "type": "integer"
                                                },
                                                "pending_sooms": {
                                                    "type": "integer"
                                                },
                                                "accepted_sooms": {
                                                    "type": "integer"
                                                },
                                                "rejected_sooms": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/my-sooms": {
            "get": {
                "tags": [
                    "Soom"
                ],
                "summary": "Get all my submitted SOOMs",
                "description": "Obtenir tous mes SOOMs envoyés (pour l'acheteur)",
                "operationId": "f59bef0db5213161864339da981187f2",
                "responses": {
                    "200": {
                        "description": "My SOOMs retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "My SOOMs retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Submission"
                                            }
                                        },
                                        "stats": {
                                            "properties": {
                                                "total_sooms": {
                                                    "type": "integer"
                                                },
                                                "pending_sooms": {
                                                    "type": "integer"
                                                },
                                                "accepted_sooms": {
                                                    "type": "integer"
                                                },
                                                "rejected_sooms": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/submissions/{submissionId}/cancel": {
            "delete": {
                "tags": [
                    "Soom"
                ],
                "summary": "Cancel a SOOM submission (buyer only)",
                "description": "Annuler un SOOM (pour l'acheteur)",
                "operationId": "9b7d446da8f4b858d94112fe2489ea4a",
                "parameters": [
                    {
                        "name": "submissionId",
                        "in": "path",
                        "description": "ID of the submission to cancel",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SOOM cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM cancelled successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Submission"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Only the submitter can cancel or SOOM already processed"
                    },
                    "404": {
                        "description": "Submission not found"
                    }
                }
            }
        },
        "/api/submissions/{submissionId}/edit": {
            "put": {
                "tags": [
                    "Soom"
                ],
                "summary": "Edit a SOOM submission (buyer only)",
                "description": "Modifier un SOOM (pour l'acheteur)",
                "operationId": "cbb14d0c6c6abedd24fc7723f82f4b4c",
                "parameters": [
                    {
                        "name": "submissionId",
                        "in": "path",
                        "description": "ID of the submission to edit",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "amount": {
                                        "description": "New amount for the SOOM submission",
                                        "type": "number",
                                        "format": "float"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "SOOM updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "SOOM updated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Submission"
                                        },
                                        "previous_amount": {
                                            "description": "Previous SOOM amount",
                                            "type": "number",
                                            "format": "float"
                                        },
                                        "current_highest": {
                                            "description": "Current highest SOOM amount after update",
                                            "type": "number",
                                            "format": "float"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden - Only the submitter can edit or SOOM already processed"
                    },
                    "404": {
                        "description": "Submission not found"
                    },
                    "422": {
                        "description": "Validation failed or amount too low"
                    }
                }
            }
        },
        "/api/listings/{listingId}/last-soom": {
            "get": {
                "tags": [
                    "Soom"
                ],
                "summary": "Get the last SOOM submission for a listing",
                "description": "Obtenir la dernière soumission SOOM pour un listing",
                "operationId": "1e3dde82a739af7f9f13bd961a2b10d3",
                "parameters": [
                    {
                        "name": "listingId",
                        "in": "path",
                        "description": "ID of the listing to get the last SOOM for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SOOM data retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Last SOOM retrieved successfully"
                                                },
                                                "data": {
                                                    "$ref": "#/components/schemas/Submission"
                                                },
                                                "has_sooms": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "total_sooms_count": {
                                                    "type": "integer",
                                                    "example": 5
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "No SOOMs found for this listing"
                                                },
                                                "data": {
                                                    "type": "null"
                                                },
                                                "has_sooms": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "total_sooms_count": {
                                                    "type": "integer",
                                                    "example": 0
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Listing not found"
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get list of users",
                "operationId": "c457726701591d1183b53aa71fc13441",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of users"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "operationId": "592819a0265360b2014512d6dbfaf0e7",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "email",
                                    "role_id"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "type": "string"
                                    },
                                    "email": {
                                        "type": "string"
                                    },
                                    "phone": {
                                        "type": "string"
                                    },
                                    "birthday": {
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "gender": {
                                        "type": "string"
                                    },
                                    "profile_picture": {
                                        "type": "string"
                                    },
                                    "address": {
                                        "type": "string"
                                    },
                                    "postal_code": {
                                        "type": "string"
                                    },
                                    "role_id": {
                                        "type": "integer"
                                    },
                                    "country_id": {
                                        "type": "integer"
                                    },
                                    "language": {
                                        "type": "string"
                                    },
                                    "timezone": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "operationId": "36a33ff774d5cba33c039dec2c3e0287",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user details",
                "operationId": "b9091397c8b25f12c6adb74be6ce3a5a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "first_name": {
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "type": "string"
                                    },
                                    "email": {
                                        "type": "string"
                                    },
                                    "phone": {
                                        "type": "string"
                                    },
                                    "birthday": {
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "gender": {
                                        "type": "string"
                                    },
                                    "profile_picture": {
                                        "type": "string"
                                    },
                                    "address": {
                                        "type": "string"
                                    },
                                    "postal_code": {
                                        "type": "string"
                                    },
                                    "role_id": {
                                        "type": "integer"
                                    },
                                    "country_id": {
                                        "type": "integer"
                                    },
                                    "language": {
                                        "type": "string"
                                    },
                                    "timezone": {
                                        "type": "string"
                                    },
                                    "is_active": {
                                        "type": "boolean"
                                    },
                                    "is_online": {
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "operationId": "fa56cffde745d3f152f95cbacd936c0b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/wishlists": {
            "get": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Get user's wishlist (auth required)",
                "operationId": "978401ca2ca07b592255725cd25a443d",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wishlist retrieved successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Add listing to wishlist (auth required)",
                "operationId": "4bdf63de7775026077073b1069c45f64",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "listing_id"
                                ],
                                "properties": {
                                    "listing_id": {
                                        "type": "integer",
                                        "example": 5
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Added to wishlist"
                    },
                    "409": {
                        "description": "Already in wishlist"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/wishlists/{id}": {
            "get": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Get a wishlist by ID",
                "operationId": "b3cf1f24ca007a63db3f93f3e5e824d1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wishlist details"
                    },
                    "404": {
                        "description": "Wishlist not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Update a wishlist",
                "operationId": "d716f58b19d41444916708b6e9eac2c2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "listing_id": {
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Wishlist updated"
                    }
                }
            }
        },
        "/api/wishlists/{listing_id}": {
            "delete": {
                "tags": [
                    "Wishlist"
                ],
                "summary": "Remove listing from wishlist (auth required)",
                "operationId": "d9775cef34325e32f1d6dc67aa11e4ac",
                "parameters": [
                    {
                        "name": "listing_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Removed from wishlist"
                    },
                    "404": {
                        "description": "Wishlist item not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "BankCard": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "card_number": {
                        "type": "string",
                        "example": "**** **** **** 1234"
                    },
                    "card_holder_name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "expiration_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-12-31"
                    },
                    "cvv": {
                        "type": "string",
                        "example": "***"
                    },
                    "card_type_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "is_default": {
                        "type": "boolean",
                        "example": true
                    },
                    "BankCardType": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Visa"
                            },
                            "description": {
                                "type": "string",
                                "example": "Standard Visa Card"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Submission": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "listing_id": {
                        "type": "integer"
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "amount": {
                        "type": "number",
                        "format": "float"
                    },
                    "submission_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "accepted",
                            "rejected"
                        ]
                    },
                    "min_soom": {
                        "type": "number",
                        "format": "float"
                    },
                    "user": {
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string",
                                "format": "email"
                            }
                        },
                        "type": "object"
                    },
                    "listing": {
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "title": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "User": {
                "title": "User",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@example.com"
                    },
                    "phone": {
                        "type": "string",
                        "example": "+212612345678"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00Z"
                    }
                },
                "type": "object"
            }
        }
    },
    "tags": [
        {
            "name": "Bike Part Brands",
            "description": "API Endpoints for managing bike part brands"
        },
        {
            "name": "Filters",
            "description": "API endpoints for filtering listings"
        },
        {
            "name": "License Plates",
            "description": "API endpoints for managing license plates"
        },
        {
            "name": "Motorcycle Brands"
        },
        {
            "name": "Motorcycles"
        },
        {
            "name": "Motorcycle Models"
        },
        {
            "name": "Motorcycle Types"
        },
        {
            "name": "Motorcycle Years"
        },
        {
            "name": "Wishlist",
            "description": "Operations related to wishlists"
        },
        {
            "name": "Authentification",
            "description": "Authentification"
        },
        {
            "name": "Bike Part Categories",
            "description": "Bike Part Categories"
        },
        {
            "name": "BankCards",
            "description": "BankCards"
        },
        {
            "name": "Card Types",
            "description": "Card Types"
        },
        {
            "name": "Categories",
            "description": "Categories"
        },
        {
            "name": "Colors",
            "description": "Colors"
        },
        {
            "name": "Authentication-firebase",
            "description": "Authentication-firebase"
        },
        {
            "name": "Image Upload",
            "description": "Image Upload"
        },
        {
            "name": "Listings",
            "description": "Listings"
        },
        {
            "name": "locations",
            "description": "locations"
        },
        {
            "name": "Motorcycle",
            "description": "Motorcycle"
        },
        {
            "name": "Plate Formats",
            "description": "Plate Formats"
        },
        {
            "name": "Promo Codes",
            "description": "Promo Codes"
        },
        {
            "name": "Roles",
            "description": "Roles"
        },
        {
            "name": "Soom",
            "description": "Soom"
        },
        {
            "name": "Users",
            "description": "Users"
        }
    ]
}